# Copyright 2020 Energinet DataHub A/S
#
# Licensed under the Apache License, Version 2.0 (the "License2");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
name: Watt Frontend CD

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  STORAGE_ACCOUNT_BASE_NAME: ''
  app-name: ui-watt
  BASE_BRANCH: ${{ github.event.pull_request.base.ref }}
  is-main-branch: ${{ github.ref == 'refs/heads/main' }}
  is-pull-request: ${{ github.event_name == 'pull_request' }}
  NODE_OPTIONS: --max-old-space-size=6144
  node-version-file: .nvmrc
  # keep in sync with "engines.yarn" and "volta.yarn" in "package.json"
  yarn-version: 1.22.19
  NX_MAX_PARALLEL: 2

  # Nx Cloud
  NX_BRANCH: ${{ github.event.number }}
  NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
  NX_RUN_GROUP: ${{ github.run_id }}

on:
  push:
    branches:
      - main
    paths-ignore:
      - apps/dh/api-dh/**
      - .github/workflows/api-dh-app-*.yml
  pull_request:
    branches:
      - main
    paths-ignore:
      - apps/dh/api-dh/**
      - .github/workflows/api-dh-app-*.yml
  workflow_dispatch: {}

jobs:
  affected:
    name: Is affected?
    runs-on: ubuntu-latest

    outputs:
      is-affected: ${{ steps.affected.outputs.is-affected }}

    steps:
      # needed for nx affected command
      - name: Check out source code with current branch Git history
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # needed for nx affected command
      - name: 'PR: Fetch base branch Git history'
        if: ${{ env.is-pull-request == 'true' }}
        run: git fetch --no-tags origin $BASE_BRANCH

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version-file: ${{ env.node-version-file }}

      - name: Get Yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache Yarn cache directory
        uses: actions/cache@v3
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Disable workspace NGCC run
        uses: ./.github/actions/setup-postinstall
        with:
          ngcc: false

      - name: Set yarn version ${{ env.yarn-version }}
        run: yarn set version ${{ env.yarn-version }}

      - name: Install package dependencies
        run: yarn install --frozen-lockfile --non-interactive

      - name: Is affected?
        id: affected
        uses: ./.github/actions/affected
        with:
          base: ${{ env.is-main-branch == 'true' && 'HEAD~1' || format('origin/{0}', env.BASE_BRANCH) }}
          project: ${{ env.app-name }}

      - name: Is affected result
        run: echo "Is affected? ${{ steps.affected.outputs.is-affected }}"

  chromatic-deployment:
    name: Deploy to Chromatic
    if: ${{ needs.affected.outputs.is-affected == 'true' }}
    needs: affected
    # Operating System
    runs-on: ubuntu-latest
    # Job steps
    steps:
      - uses: actions/checkout@v1

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version-file: ${{ env.node-version-file }}

        # Install dependencies
      - name: Get Yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache Yarn cache directory
        uses: actions/cache@v3
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Set yarn version ${{ env.yarn-version }}
        run: yarn set version ${{ env.yarn-version }}

      - name: Install package dependencies
        run: yarn install --frozen-lockfile --non-interactive

        # ðŸ‘‡ Adds Chromatic as a step in the workflow
      - name: Publish to Chromatic
        uses: chromaui/action@v1
        # Chromatic GitHub Action options
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          # ðŸ‘‡ Chromatic projectToken, refer to the manage page to obtain it.
          projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}
          exitZeroOnChanges: true # ðŸ‘ˆ Option to prevent the workflow from failing
          buildScriptName: 'designsystem:build'

  publish_inbound:
    name: Publish
    if: ${{ needs.affected.outputs.is-affected == 'true' }}
    needs: affected
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@master

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version-file: ${{ env.node-version-file }}

      - name: Get Yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache Yarn cache directory
        uses: actions/cache@v3
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Disable workspace NGCC run
        uses: ./.github/actions/setup-postinstall
        with:
          ngcc: false

      - name: Set yarn version ${{ env.yarn-version }}
        run: yarn set version ${{ env.yarn-version }}

      - name: Install package dependencies
        run: yarn install --frozen-lockfile --non-interactive

      - name: Production build
        run: yarn designsystem:build

      - name: Find associated pull request
        uses: jwalton/gh-find-current-pr@v1
        id: find_pull_request
        with:
          state: all

      - name: Fail if PR not found
        if: steps.find_pull_request.outputs.pr == ''
        run: exit 1

      - name: Set RELEASE_VERSION
        shell: bash
        run: |
          echo "RELEASE_VERSION=watt_frontend_${{ steps.find_pull_request.outputs.pr }}" >> $GITHUB_ENV
          echo "RELEASE_FOLDER_PATH=${{ github.workspace }}/watt_frontend_${{ steps.find_pull_request.outputs.pr }}" >> $GITHUB_ENV

      - name: Setup Release
        shell: bash
        run: |
          mkdir -p ${{ env.RELEASE_FOLDER_PATH }}
          mv ${{ github.workspace }}/dist/designsystem ${{ env.RELEASE_FOLDER_PATH }}
          ls -ahl ${{ env.RELEASE_FOLDER_PATH }}

      - name: Zip artifact
        uses: thedoctor0/zip-release@master
        with:
          type: 'zip'
          filename: ${{ env.RELEASE_VERSION }}.zip
          directory: ${{ github.workspace }}/dist
          path: designsystem/

      - uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: ${{ secrets.PAT_TOKEN }}
          automatic_release_tag: ${{ env.RELEASE_VERSION }}
          title: ${{ env.RELEASE_VERSION }}
          prerelease: false
          files: ${{ github.workspace }}/dist/${{ env.RELEASE_VERSION }}.zip

  dispatch_deployment_request:
    needs: publish_inbound
    uses: Energinet-DataHub/.github/.github/workflows/dispatch-deployment-request.yml@override-release-names
    with:
      CALLER_REPOSITORY_NAME: greenforce-frontend
      CALLER_REPOSITORY_PATH: Energinet-DataHub/greenforce-frontend
      RELEASE_NAME_PREFIX: watt_frontend_
      CUSTOM_EVENT_TYPE: watt-frontend
    secrets:
      PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
      ENVIRONMENT_REPOSITORY_PATH: ${{ secrets.ENVIRONMENT_REPOSITORY_PATH }}
