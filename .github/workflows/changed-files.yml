name: Production Dependencies

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  pull_request:
    branches:
      - main
  workflow_dispatch: {}

jobs:
  dependenciesHaveChanged:
    name: Have dependencies changed?
    runs-on: ubuntu-latest

    outputs:
      dependencies-have-changed: ${{ steps.dependenciesHaveChanged.outputs.dependencies-have-changed }}

    steps:
      # needed for local github actions
      - name: Check out source code with current branch Git history
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Check if dependencies have changed
        id: dependenciesHaveChanged
        uses: ./.github/actions/dependencies-have-changed

  License_check:
    name: License Check
    needs: dependenciesHaveChanged
    if: ${{ needs.dependenciesHaveChanged.outputs.dependencies-have-changed == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout latest code
        uses: actions/checkout@v2
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version-file: ${{ env.node-version-file }}
      - name: Get Yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache Yarn cache directory
        uses: actions/cache@v3
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Disable Angular Compatibility Compiler
        uses: ./.github/actions/setup-postinstall
        with:
          ngcc: false

      - name: Set yarn version ${{ env.yarn-version }}
        run: yarn set version ${{ env.yarn-version }}

      - name: Install package dependencies
        run: yarn install --frozen-lockfile --non-interactive

      - name: Read .allowed-licenses.json
        id: allowed-licenses
        shell: bash
        run: echo ::set-output name=FILE::$(jq -r .[] .allowed-licenses.json | tr '\n' ';')
      - name: Run license-checker
        run: npx license-checker-rseidelsohn --direct --summary --production --onlyAllow="${{ steps.allowed-licenses.outputs.FILE }}"
