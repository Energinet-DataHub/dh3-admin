


# # Copyright 2020 Energinet DataHub A/S
# #
# # Licensed under the Apache License, Version 2.0 (the "License2");
# # you may not use this file except in compliance with the License.
# # You may obtain a copy of the License at
# #
# #     http://www.apache.org/licenses/LICENSE-2.0
# #
# # Unless required by applicable law or agreed to in writing, software
# # distributed under the License is distributed on an "AS IS" BASIS,
# # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# # See the License for the specific language governing permissions and
# # limitations under the License.

# # DataHub UI Frontend and BFF
# name: DH CI

# concurrency:
#   group: ${{ github.workflow }}-${{ github.ref }}
#   cancel-in-progress: true

# env:
#   APP_NAME: app-dh
#   IS_MAIN_BRANCH: ${{ github.ref == 'refs/heads/main' }}
#   IS_PULL_REQUEST: ${{ github.event_name == 'pull_request' }}
#   NODE_OPTIONS: --max-old-space-size=6144
#   NODE_VERSION_FILE: .nvmrc
#   # keep in sync with "engines.yarn" and "volta.yarn" in "package.json"
#   YARN_VERSION: 1.22.19
#   NX_MAX_PARALLEL: 2

# on:
#   pull_request:
#     branches:
#       - main

# jobs:
#   #
#   # Detect changes to start relevant jobs
#   #

#   changes:
#     uses: ./.github/workflows/dh-detect-changes.yml

#   #
#   # Frontend
#   #
#   frontend_ci_build:
#     if: ${{ needs.changes.outputs.frontend == 'true' }}
#     needs: changes
#     runs-on: ubuntu-latest
#     env:
#       RELEASE_VERSION: ui_frontend_${{ github.event.number }}
#       RELEASE_FOLDER_PATH: ${{ github.workspace }}/ui_frontend_${{ github.event.number }}
#     steps:
#       - uses: actions/checkout@v3

#       - name: Set up Node.js
#         uses: actions/setup-node@v3
#         with:
#           node-version-file: ${{ env.NODE_VERSION_FILE }}
#           cache: 'yarn'

#       - name: Disable workspace NGCC run
#         uses: ./.github/actions/setup-postinstall
#         with:
#           ngcc: false

#       - name: Set yarn version ${{ env.YARN_VERSION }}
#         run: yarn set version ${{ env.YARN_VERSION }}

#       - name: Install package dependencies
#         run: yarn install --frozen-lockfile --non-interactive

#       - name: Angular Compatibility Compiler
#         run: npm run ngcc:dh

#       - name: Production build
#         run: yarn nx build ${{ env.APP_NAME }} --max-parallel=$${{ env.NX_MAX_PARALLEL }}

#       - name: Optimize i18n assets
#         run: yarn i18n:optimize:${{ env.APP_NAME }}

#       - name: Setup Release
#         shell: bash
#         run: cp -R ${{ github.workspace }}/dist/apps/dh/${{ env.APP_NAME }} ${{ env.RELEASE_FOLDER_PATH }}

#       - name: Zip artifact
#         uses: thedoctor0/zip-release@master
#         with:
#           type: 'zip'
#           filename: '${{ env.RELEASE_VERSION }}.zip'
#           directory: ${{ env.RELEASE_FOLDER_PATH }}

#       - name: Create prelease
#         uses: marvinpinto/action-automatic-releases@v1.2.1
#         with:
#           repo_token: ${{ secrets.GITHUB_TOKEN }}
#           automatic_release_tag: ${{ env.RELEASE_VERSION }}
#           prerelease: true
#           title: ${{ env.RELEASE_VERSION }}
#           files: ${{ env.RELEASE_FOLDER_PATH }}/${{ env.RELEASE_VERSION }}.zip

#   #
#   # CI .NET
#   #

#   # Build all projects within solution
#   dotnet_ci_build:
#     needs: changes
#     if: ${{ needs.changes.outputs.dotnet == 'true' }}
#     uses: Energinet-DataHub/.github/.github/workflows/dotnet-build-prerelease.yml@v10
#     with:
#       SOLUTION_FILE_PATH: 'apps/dh/api-dh/DataHub.WebApi.sln'
#       RELEASE_NAME_PREFIX: ui_dotnet

#   # Run all tests in 'Tests.dll'
#   dotnet_ci_test:
#     needs: changes
#     if: ${{ needs.changes.outputs.dotnet == 'true' }}
#     uses: Energinet-DataHub/.github/.github/workflows/dotnet-postbuild-test.yml@v10
#     with:
#       TESTS_DLL_FILE_PATH: '\apps\dh\api-dh\source\DataHub.WebApi.Tests\bin\Release\net6.0\Energinet.DataHub.WebApi.Tests.dll'
#       DOWNLOAD_ATTEMPT_LIMIT: 12
#       ENVIRONMENT: AzureAuth
#     secrets:
#       AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
#       AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
#       AZURE_SPN_ID: ${{ secrets.AZURE_SPN_ID_OIDC }}
#       AZURE_KEYVAULT_URL: ${{ secrets.AZURE_KEYVAULT_URL }}
#       AZURE_B2CSECRETS_KEYVAULT_URL: ${{ secrets.AZURE_B2CSECRETS_KEYVAULT_URL }}

#   #
#   # Client Generation
#   #

#   generate_client:
#     needs: dotnet_ci_build
#     runs-on: ubuntu-latest
#     env:
#       output-path: libs/dh/shared/domain/src/lib/generated/v1/
#     steps:
#       # needed to push to origin
#       - name: 'PR: Check out source code with current branch Git history'
#         if: ${{ env.IS_PULL_REQUEST == 'true' }}
#         uses: actions/checkout@v3
#         with:
#           fetch-depth: 0
#           ref: ${{ github.head_ref }}
#           token: ${{ secrets.PAT_TOKEN }}

#       - name: 'Merge: Check out source code'
#         if: ${{ env.IS_MAIN_BRANCH == 'true' }}
#         uses: actions/checkout@v3

#       - name: Set up Node.js
#         uses: actions/setup-node@v3
#         with:
#           node-version-file: ${{ env.NODE_VERSION_FILE }}
#           cache: 'yarn'

#       - name: Set yarn version ${{ env.YARN_VERSION }}
#         run: yarn set version ${{ env.YARN_VERSION }}

#       - name: Install package dependencies
#         run: yarn install --frozen-lockfile --non-interactive

#       - name: Generate API client
#         run: yarn nx run api-dh:build-client

#       - name: 'PR: Commit generated files'
#         if: ${{ env.IS_PULL_REQUEST == 'true' }}
#         run: |
#           git config user.name "github-actions[bot]"
#           git config user.email "github-actions[bot]@users.noreply.github.com"
#           git add ${{ env.output-path }} || cd .
#           git commit -m 'feat(dh): generate DataHub API v1 client' || cd .
#           git push origin --force-with-lease || cd .

#       - name: 'Merge: Verify no changes'
#         if: ${{ env.IS_MAIN_BRANCH == 'true' }}
#         run: |
#           git diff ${{ env.output-path }} --exit-code || (echo '‚ùå DataHub API v1 client is out-of-sync. Run the `build-client` Nx target and merge the changes.' && exit 1)

#   #
#   # Branch policy status check
#   #

#   allow_merge:
#     runs-on: ubuntu-latest
#     needs: [
#         # .NET
#         dotnet_ci_build,
#         dotnet_ci_test,

#         # Frontend client
#         generate_client,

#         # Frontend
#         frontend_ci_build,
#       ]
#     if: |
#       always()
#     steps:
#       - name: Verify if merge is allowed
#         run: |
#           echo "${{ toJSON(needs) }}"
#           if [[ ${{ contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled') }} = true ]]; then
#             echo "Failed"
#             exit 1
#           fi
