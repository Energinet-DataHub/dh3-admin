schema {
  query: GraphQLQuery
  mutation: GraphQLMutation
}

type GraphQLQuery {
  permission(
    """The id of the permission"""
    id: ID
  ): Permission!
  permissions(
    """The search term for which to look for in name and description"""
    searchTerm: String
  ): [Permission!]!
  permissionLogs(
    """The id of the permission"""
    id: ID
  ): [PermissionAuditLog!]!
  userrole(
    """The id of the user role"""
    id: ID
  ): UserRoleWithPermissions!
  organizations: [Organization]
  organization(
    """The id of the organization"""
    id: ID
  ): Organization
  gridAreas: [GridArea!]!
  calculation(
    """The id of the calculation"""
    id: ID
  ): Calculation
  calculations(executionTime: DateRange, executionStates: [BatchState!], processTypes: [ProcessType!], gridAreaCodes: [String], period: DateRange, first: Int): [Calculation!]!
  settlementReports(processType: ProcessType, gridAreaCodes: [String], period: DateRange, executionTime: DateRange): [SettlementReport!]!
  actor(
    """The id of the actor"""
    id: ID
  ): Actor!
  actors(eicFunctions: [EicFunction!]): [Actor!]!
  esettExchangeEvent(
    """The id of the exchange document."""
    documentId: String!
  ): ExchangeEventTrackingResultType!
  esettExchangeEvents(
    """The number of the page to retrieve data for."""
    pageNumber: Int!

    """The number of items on each page."""
    pageSize: Int!

    """The start date and time of the filter period."""
    periodFrom: DateTime

    """The end date and time of the filter period."""
    periodTo: DateTime

    """The code of the grid area the document is referencing."""
    gridAreaCode: String

    """
    The type of process that generated the calculation results in the document.
    """
    processType: ExchangeEventProcessType

    """The delivery status of the document."""
    documentStatus: DocumentStatus

    """The type of calculation result in the document."""
    timeSeriesType: TimeSeriesType
  ): ExchangeEventSearchResponseType!
}

type Permission {
  """The ID of the permission."""
  id: Int!

  """The name of the permission."""
  name: String!

  """The description of the permission."""
  description: String!

  """The created date of the permission."""
  created: DateTimeOffset!

  """The EIC functions this permission is assignable to."""
  assignableTo: [EicFunction!]!
  userRoles: [UserRole!]!
}

"""
The `DateTimeOffset` scalar type represents a date, time and offset from UTC. `DateTimeOffset` expects timestamps to be formatted in accordance with the [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
"""
scalar DateTimeOffset

enum EicFunction {
  BalanceResponsibleParty
  BillingAgent
  EnergySupplier
  GridAccessProvider
  ImbalanceSettlementResponsible
  MeteredDataAdministrator
  MeteredDataResponsible
  MeteringPointAdministrator
  SystemOperator
  DanishEnergyAgency
  ElOverblik
  DataHubAdministrator
  IndependentAggregator
  SerialEnergyTrader
}

type UserRole {
  """The user role id."""
  id: ID!

  """The user role name."""
  name: String!

  """The user role description"""
  description: String!

  """The EIC function the user role belongs to"""
  eicFunction: EicFunction!

  """The user role status"""
  status: UserRoleStatus!
}

enum UserRoleStatus {
  ACTIVE
  INACTIVE
}

type PermissionAuditLog {
  """Permission id"""
  permissionId: Int!

  """Changed by user id"""
  changedByUserId: ID!

  """Time of change"""
  timestamp: DateTimeOffset!

  """Permission audit log type"""
  permissionAuditLogType: PermissionAuditLogType!

  """Changed by user name"""
  changedByUserName: String!

  """The new value after the change"""
  value: String!
}

enum PermissionAuditLogType {
  UNKNOWN
  DESCRIPTION_CHANGE
  CREATED
}

type UserRoleWithPermissions {
  """User role id"""
  id: ID!

  """User role name"""
  name: String!

  """User role description."""
  description: String

  """User role status."""
  status: UserRoleStatus

  """User role market role."""
  eicFunction: EicFunction

  """User role permissions."""
  permissions: [Permission]
}

type Organization {
  """The ID of the organization."""
  organizationId: ID!

  """The name of the organization."""
  name: String!

  """The business register identifier of the organization."""
  businessRegisterIdentifier: String!

  """The status of the organization."""
  status: OrganizationStatus!

  """The comment of the organization."""
  comment: String!

  """The address of the organization."""
  address: Address!
}

enum OrganizationStatus {
  NEW
  ACTIVE
  BLOCKED
  DELETED
}

type Address {
  """The city of the address."""
  city: String

  """The country of the address."""
  country: String!

  """The number of the address."""
  number: String

  """The street name of the address."""
  streetName: String

  """The zip code of the address."""
  zipCode: String
}

type GridArea {
  """The grid area id."""
  id: ID!

  """The grid area code."""
  code: String!

  """The grid area name."""
  name: String!

  """The price area code for the grid area."""
  priceAreaCode: PriceAreaCode!

  """Date that the grid area is valid from"""
  validFrom: DateTimeOffset!

  """Date that the grid area is valid to"""
  validTo: DateTimeOffset
}

enum PriceAreaCode {
  DK_1
  DK_2
}

type Calculation {
  """The id of the calculation."""
  id: ID!

  """The execution state."""
  executionState: BatchState!

  """The execution start time."""
  executionTimeStart: DateTimeOffset

  """The execution end time."""
  executionTimeEnd: DateTimeOffset

  """The process type."""
  processType: ProcessType!
  createdByUserName: String!
  gridAreas: [GridArea!]!
  statusType: StatusType!
  period: DateRange
}

enum BatchState {
  PENDING
  EXECUTING
  COMPLETED
  FAILED
}

enum ProcessType {
  BALANCE_FIXING
  AGGREGATION
  WHOLESALE_FIXING
  FIRST_CORRECTION_SETTLEMENT
  SECOND_CORRECTION_SETTLEMENT
  THIRD_CORRECTION_SETTLEMENT
}

"""How the status should be represented visually."""
enum StatusType {
  warning
  success
  danger
  info
}

scalar DateRange

type SettlementReport {
  """The batch number"""
  batchNumber: ID!

  """The process type."""
  processType: ProcessType!

  """The grid area."""
  gridArea: GridArea!
  period: DateRange

  """The execution time."""
  executionTime: DateTimeOffset
}

type Actor {
  """The id of the actor."""
  id: ID!

  """The gln or eic number of the actor."""
  glnOrEicNumber: String!

  """The name of the actor."""
  name: String!

  """The grid areas the actor belongs to."""
  gridAreas: [GridArea!]!

  """The market role of the actor."""
  marketRole: EicFunction

  """The status of the actor."""
  status: ActorStatus

  """The organization of the actor."""
  organization: Organization
}

enum ActorStatus {
  New
  Active
  Inactive
  Passive
}

type ExchangeEventTrackingResultType {
  """The id of the found exchanged document."""
  documentId: String!

  """The time when the document was generated."""
  created: DateTimeOffset!

  """The code of the grid area the document is referencing."""
  gridAreaCode: String!

  """The start date and time of the calculation period."""
  periodFrom: DateTimeOffset!

  """The end date and time of the calculation period."""
  periodTo: DateTimeOffset!

  """
  The type of process that generated the calculation results in the document.
  """
  processType: ExchangeEventProcessType!

  """The delivery status of the document."""
  documentStatus: DocumentStatus!

  """The type of calculation result in the document."""
  timeSeriesType: TimeSeriesType!
}

enum ExchangeEventProcessType {
  BALANCE_FIXING
  AGGREGATION
}

enum DocumentStatus {
  RECEIVED
  AWAITING_DISPATCH
  AWAITING_REPLY
  ACCEPTED
  REJECTED
}

enum TimeSeriesType {
  MGA_EXCHANGE
  PRODUCTION
  CONSUMPTION
}

type ExchangeEventSearchResponseType {
  """The partial result based on the specified page number and page size."""
  items: [ExchangeEventSearchResultType!]!

  """The total number of items in the result set."""
  totalCount: Int!
}

type ExchangeEventSearchResultType {
  """The id of the found exchanged document."""
  documentId: String!

  """The code of the grid area the document is referencing."""
  gridAreaCode: String!

  """
  The type of process that generated the calculation results in the document.
  """
  processType: ExchangeEventProcessType!

  """The delivery status of the document."""
  documentStatus: DocumentStatus!

  """The type of calculation result in the document."""
  timeSeriesType: TimeSeriesType!
}

"""
The `DateTime` scalar type represents a date and time. `DateTime` expects timestamps to be formatted in accordance with the [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
"""
scalar DateTime

type GraphQLMutation {
  updatePermission(
    """Permission to update"""
    input: UpdatePermissionInput!
  ): Permission!
  createCalculation(
    """Calculation to create"""
    input: CreateCalculationInput!
  ): Calculation!
}

input UpdatePermissionInput {
  """The id of the permission to update"""
  id: Int!

  """The description of the permission to update"""
  description: String!
}

input CreateCalculationInput {
  """The period for the calculation."""
  period: DateRange!

  """The process type for the calculation."""
  processType: ProcessType!

  """The grid areas to be included in the calculation."""
  gridAreaCodes: [String!]!
}