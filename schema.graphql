"""Represents a date range"""
scalar DateRange

type ActorAuditedChangeAuditLogDto {
  auditedBy: String
  change: ActorAuditedChange!
  timestamp: DateTime!
  isInitialAssignment: Boolean!
  currentValue: String
  previousValue: String
}

enum ActorStatus {
  New
  Active
  Inactive
  Passive
}

type Actor {
  id: UUID!
  name: String!
  glnOrEicNumber: String!
  marketRole: EicFunction
  status: ActorStatus!
  gridAreas: [GridAreaDto!]!
  contact: ActorContactDto
  organization: Organization!
}

type BalanceResponsibleType {
  validPeriod: DateRange!
  gridAreaWithName: GridAreaDto
  supplierWithName: ActorNameDto
  balanceResponsibleWithName: ActorNameDto
  id: String!
  receivedDateTime: DateTime!
  supplier: String!
  balanceResponsible: String!
  meteringPointType: TimeSeriesType!
  gridArea: String!
}

"""An immutable calculation."""
type Calculation {
  id: UUID!
  period: DateRange!
  createdByUserName: String
  gridAreas: [GridAreaDto!]!
  statusType: ProcessStatus!
  runId: Long
  resolution: String
  unit: String
  executionTimeStart: DateTime
  executionTimeEnd: DateTime
  executionState: CalculationState!
  areSettlementReportsCreated: Boolean!
  calculationType: CalculationType!
}

enum EdiB2CProcessType {
  preliminaryaggregation
  balancefixing
  wholesalefixing
  firstcorrection
  secondcorrection
  thirdcorrection
}

enum EicFunction {
  BalanceResponsibleParty
  BillingAgent
  EnergySupplier
  GridAccessProvider
  ImbalanceSettlementResponsible
  MeterOperator
  MeteredDataAdministrator
  MeteredDataResponsible
  MeteringPointAdministrator
  SystemOperator
  DanishEnergyAgency
  DataHubAdministrator
  IndependentAggregator
  SerialEnergyTrader
  Delegated
}

type EsettOutgoingMessage {
  period: DateRange!
  gridArea: GridAreaDto
  documentId: String!
  created: DateTime!
  calculationType: ExchangeEventCalculationType!
  timeSeriesType: TimeSeriesType!
  documentStatus: DocumentStatus!
  lastDispatched: DateTime
}

enum ExchangeEventCalculationType {
  BALANCE_FIXING
  AGGREGATION
}

type ExchangeEventSearchResult {
  gridArea: GridAreaDto
  energySupplier: ActorNameDto
  documentId: String!
  actorNumber: String
  gridAreaCodeOut: String
  created: DateTime!
  calculationType: ExchangeEventCalculationType!
  timeSeriesType: TimeSeriesType!
  documentStatus: DocumentStatus!
  lastDispatched: DateTime
}

type GridAreaDto {
  priceAreaCode: PriceAreaCode!
  displayName: String!
  id: UUID!
  code: String!
  name: String!
  validFrom: DateTime!
  validTo: DateTime
}

"""Imbalance price"""
type ImbalancePrice {
  priceAreaCode: PriceAreaCode!
  timestamp: DateTime!
  price: Float!
}

"""Imbalance price for a given date"""
type ImbalancePriceDaily {
  status: ImbalancePriceStatus!
  timeStamp: DateTime!
  imbalancePrices: [ImbalancePrice!]!
  importedAt: DateTime
}

type MessageDelegationType {
  gridArea: GridAreaDto
  delegatedBy: Actor
  delegatedTo: Actor
  status: ActorDelegationStatus!
  id: UUID!
  periodId: UUID!
  process: DelegatedProcess!
  validPeriod: DateRange!
}

type MeteringGridAreaImbalanceSearchResult {
  period: DateRange!
  gridArea: GridAreaDto
  id: String!
  documentDateTime: DateTime!
  receivedDateTime: DateTime!
  incomingImbalancePerDay: [MeteringGridAreaImbalancePerDayDto!]!
  outgoingImbalancePerDay: [MeteringGridAreaImbalancePerDayDto!]!
}

type OrganizationAuditedChangeAuditLogDto {
  auditedBy: String
  change: OrganizationAuditedChange!
  timestamp: DateTime!
  isInitialAssignment: Boolean!
  currentValue: String
  previousValue: String
}

type Organization {
  organizationId: String
  actors: [Actor!]
  name: String!
  businessRegisterIdentifier: String!
  domain: String!
  status: String!
  address: AddressDto!
}

type PermissionAuditedChangeAuditLogDto {
  auditedBy: String
  change: PermissionAuditedChange!
  timestamp: DateTime!
  isInitialAssignment: Boolean!
  currentValue: String
  previousValue: String
}

type Permission {
  userRoles: [UserRoleDto!]!
  id: Int!
  name: String!
  description: String!
  created: DateTime!
  assignableTo: [EicFunction!]!
}

enum ProcessStatus {
  warning
  success
  danger
  info
}

type UserAuditedChangeAuditLogDto {
  auditedBy: String
  affectedActorName: String
  affectedUserRoleName: String
  change: UserAuditedChange!
  timestamp: DateTime!
  isInitialAssignment: Boolean!
  currentValue: String
  previousValue: String
}

type UserRoleAuditedChangeAuditLogDto {
  auditedBy: String
  affectedPermissionName: String
  change: UserRoleAuditedChange!
  timestamp: DateTime!
  isInitialAssignment: Boolean!
  currentValue: String
  previousValue: String
}

enum ApplyPolicy {
  BEFORE_RESOLVER
  AFTER_RESOLVER
  VALIDATION
}

type Query {
  actorAuditLogs(actorId: UUID!): [ActorAuditedChangeAuditLogDto!]!
  selectedActor: Actor!
  actorById(id: UUID!): Actor!
  actors: [Actor!]!
  actorsByOrganizationId(organizationId: UUID!): [Actor!]!
  actorsForEicFunction(eicFunctions: [EicFunction!]): [Actor!]!
  delegationsForActor(actorId: UUID!): [MessageDelegationType!]!
  associatedActors(email: String!): AssociatedActors!
  calculationById(id: UUID!): Calculation!
  calculations(input: CalculationQueryInput!): [Calculation!]!
  latestBalanceFixing(period: DateRange!): Calculation
  esettServiceStatus: [ReadinessStatusDto!]!
  esettExchangeStatusReport: ExchangeEventStatusReportResponse!
  esettOutgoingMessageById(documentId: String!): EsettOutgoingMessage!
  esettExchangeEvents(pageNumber: Int!, pageSize: Int!, periodInterval: DateRange, createdInterval: DateRange, sentInterval: DateRange, gridAreaCode: String, calculationType: ExchangeEventCalculationType, documentStatus: DocumentStatus, timeSeriesType: TimeSeriesType, documentId: String, sortProperty: ExchangeEventSortProperty!, sortDirection: SortDirection!, actorNumber: String): ExchangeEventSearchResponse!
  downloadEsettExchangeEvents(locale: String!, periodInterval: DateRange, createdInterval: DateRange, sentInterval: DateRange, gridAreaCode: String, calculationType: ExchangeEventCalculationType, documentStatus: DocumentStatus, timeSeriesType: TimeSeriesType, documentId: String, sortProperty: ExchangeEventSortProperty!, sortDirection: SortDirection!, actorNumber: String): String!
  meteringGridAreaImbalance(pageNumber: Int!, pageSize: Int!, createdFrom: DateTime, createdTo: DateTime, calculationPeriod: DateRange, gridAreaCode: String, documentId: String, valuesToInclude: MeteringGridImbalanceValuesToInclude!, sortProperty: MeteringGridAreaImbalanceSortProperty!, sortDirection: SortDirection!): MeteringGridAreaImbalanceSearchResponse!
  downloadMeteringGridAreaImbalance(locale: String!, createdFrom: DateTime, createdTo: DateTime, calculationPeriod: DateRange, gridAreaCode: String, documentId: String, valuesToInclude: MeteringGridImbalanceValuesToInclude!, sortProperty: MeteringGridAreaImbalanceSortProperty!, sortDirection: SortDirection!): String!
  balanceResponsible(pageNumber: Int!, pageSize: Int!, sortProperty: BalanceResponsibleSortProperty!, sortDirection: SortDirection!): BalanceResponsiblePageResult!
  downloadBalanceResponsibles(locale: String!, sortProperty: BalanceResponsibleSortProperty!, sortDirection: SortDirection!): String!
  gridAreaOverview: [GridAreaOverviewItemDto!]!
  gridAreas: [GridAreaDto!]!
  imbalancePricesOverview: ImbalancePricesOverview!
  imbalancePricesForMonth(year: Int!, month: Int!, areaCode: PriceAreaCode!): [ImbalancePriceDaily!]!
  organizationAuditLogs(organizationId: UUID!): [OrganizationAuditedChangeAuditLogDto!]!
  organizationById(id: UUID!): Organization!
  organizations: [Organization!]!
  searchOrganizationInCVR(cvr: String!): CVROrganizationResult!
  permissionById(id: Int!): Permission!
  permissions(searchTerm: String!): [Permission!]!
  permissionAuditLogs(id: Int!): [PermissionAuditedChangeAuditLogDto!]!
  userRoleAuditLogs(id: UUID!): [UserRoleAuditedChangeAuditLogDto!]!
  userAuditLogs(id: UUID!): [UserAuditedChangeAuditLogDto!]!
  userRoleById(id: UUID!): UserRoleWithPermissionsDto!
  userRolesByEicFunction(eicFunction: EicFunction!): [UserRoleDto!]!
  userProfile: GetUserProfileResponse!
  emailExists(emailAddress: String!): Boolean!
  knownEmails: [String!]!
}

type Mutation {
  updatePermission(input: UpdatePermissionDtoInput!): Permission!
  updateActor(input: UpdateActorInput!): UpdateActorPayload!
  createCalculation(input: CreateCalculationInput!): CreateCalculationPayload!
  createAggregatedMeasureDataRequest(input: CreateAggregatedMeasureDataRequestInput!): CreateAggregatedMeasureDataRequestPayload!
  updateOrganization(input: UpdateOrganizationInput!): UpdateOrganizationPayload!
  createMarketParticipant(input: CreateMarketParticipantInput!): CreateMarketParticipantPayload!
  updateUserProfile(input: UpdateUserProfileInput!): UpdateUserProfilePayload!
  resendWaitingEsettExchangeMessages: ResendWaitingEsettExchangeMessagesPayload!
  createDelegationsForActor(input: CreateDelegationsForActorInput!): CreateDelegationsForActorPayload!
  stopDelegation(input: StopDelegationInput!): StopDelegationPayload!
}

type Subscription {
  calculationProgress: Calculation!
}

enum ActorAuditedChange {
  NAME
  STATUS
  CONTACT_NAME
  CONTACT_EMAIL
  CONTACT_PHONE
  CONTACT_CATEGORY_ADDED
  CONTACT_CATEGORY_REMOVED
  CERTIFICATE_CREDENTIALS
  CLIENT_SECRET_CREDENTIALS
  DELEGATION_START
  DELEGATION_STOP
}

"""The `DateTime` scalar represents an ISO-8601 compliant date time type."""
scalar DateTime

scalar UUID

type ActorContactDto {
  contactId: UUID!
  category: ContactCategory!
  name: String!
  email: String!
  phone: String
}

type ActorNameDto {
  value: String!
}

enum TimeSeriesType {
  MGA_EXCHANGE
  PRODUCTION
  CONSUMPTION
}

"""
The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

enum CalculationState {
  PENDING
  EXECUTING
  COMPLETED
  FAILED
}

"""Defines the wholesale calculation type"""
enum CalculationType {
  BALANCE_FIXING
  AGGREGATION
  WHOLESALE_FIXING
  FIRST_CORRECTION_SETTLEMENT
  SECOND_CORRECTION_SETTLEMENT
  THIRD_CORRECTION_SETTLEMENT
}

enum DocumentStatus {
  RECEIVED
  AWAITING_DISPATCH
  AWAITING_REPLY
  ACCEPTED
  REJECTED
  BIZ_TALK_ACCEPTED
}

enum PriceAreaCode {
  DK1
  DK2
}

enum ImbalancePriceStatus {
  NO_DATA
  IN_COMPLETE
  COMPLETE
}

enum ActorDelegationStatus {
  AWAITING
  ACTIVE
  EXPIRED
  CANCELLED
}

enum DelegatedProcess {
  REQUEST_ENERGY_RESULTS
  RECEIVE_ENERGY_RESULTS
  REQUEST_WHOLESALE_RESULTS
  RECEIVE_WHOLESALE_RESULTS
}

type MeteringGridAreaImbalancePerDayDto {
  imbalanceDay: DateTime!
  firstOccurrenceOfImbalance: DateTime!
  firstPositionOfImbalance: Int!
  quantity: Float!
}

enum OrganizationAuditedChange {
  DOMAIN
  NAME
}

type AddressDto {
  streetName: String
  number: String
  zipCode: String
  city: String
  country: String!
}

enum PermissionAuditedChange {
  CLAIM
  DESCRIPTION
}

type UserRoleDto {
  id: UUID!
  name: String!
  description: String!
  eicFunction: EicFunction!
  status: UserRoleStatus!
}

enum UserAuditedChange {
  FIRST_NAME
  LAST_NAME
  PHONE_NUMBER
  STATUS
  INVITED_INTO_ACTOR
  USER_ROLE_ASSIGNED
  USER_ROLE_REMOVED
  USER_ROLE_REMOVED_DUE_TO_DEACTIVATION
}

enum UserRoleAuditedChange {
  NAME
  DESCRIPTION
  STATUS
  PERMISSION_ADDED
  PERMISSION_REMOVED
}

type ApiError implements Error {
  message: String!
  apiErrors: [ApiErrorDescriptor!]!
  statusCode: Int!
  response: String
  headers: [KeyValuePairOfStringAndIEnumerableOfString!]!
}

interface Error {
  message: String!
}

type KeyValuePairOfStringAndIEnumerableOfString {
  key: String!
  value: [String!]!
}

type ApiErrorDescriptor {
  message: String!
  code: String!
  args: JSON!
}

enum UserRoleStatus {
  ACTIVE
  INACTIVE
}

enum ContactCategory {
  DEFAULT
  CHARGES
  CHARGE_LINKS
  ELECTRICAL_HEATING
  END_OF_SUPPLY
  ENERGINET_INQUIRY
  ERROR_REPORT
  INCORRECT_MOVE
  INCORRECT_SWITCH
  MEASUREMENT_DATA
  METERING_POINT
  NET_SETTLEMENT
  NOTIFICATION
  RECON
  REMINDER
}

input StopProcessDelegationDtoInput {
  id: UUID!
  periodId: UUID!
  stopsAt: DateTime
}

input CreateProcessDelegationsDtoInput {
  delegatedFrom: UUID!
  delegatedTo: UUID!
  gridAreas: [UUID!]!
  delegatedProcesses: [DelegatedProcess!]!
  startsAt: DateTime!
}

input UserProfileUpdateDtoInput {
  firstName: String!
  lastName: String!
  phoneNumber: String!
}

input CreateMarketParticipantInput {
  organizationId: UUID
  organization: CreateOrganizationDtoInput
  actor: CreateActorDtoInput!
  actorContact: CreateActorContactDtoInput!
}

enum MeteringPointType {
  PRODUCTION
  FLEX_CONSUMPTION
  TOTAL_CONSUMPTION
  NON_PROFILED_CONSUMPTION
  EXCHANGE
}

input UpdatePermissionDtoInput {
  id: Int!
  description: String!
}

type GetUserProfileResponse {
  firstName: String!
  lastName: String!
  phoneNumber: String!
}

type UserRoleWithPermissionsDto {
  id: UUID!
  name: String!
  description: String!
  eicFunction: EicFunction!
  status: UserRoleStatus!
  permissions: [PermissionDetailsDto!]!
}

type CVROrganizationResult {
  name: String!
  hasResult: Boolean!
}

type ImbalancePricesOverview {
  pricePeriods: [ImbalancePricePeriod!]!
}

type GridAreaOverviewItemDto {
  id: UUID!
  code: String!
  name: String!
  priceAreaCode: String!
  validFrom: DateTime!
  validTo: DateTime
  actorNumber: String
  actorName: String
  organizationName: String
  fullFlexDate: DateTime
}

enum BalanceResponsibleSortProperty {
  VALID_FROM
  VALID_TO
  RECEIVED_DATE
}

type BalanceResponsiblePageResult {
  page: [BalanceResponsibleType!]!
  totalCount: Int!
}

enum MeteringGridAreaImbalanceSortProperty {
  DOCUMENT_DATE_TIME
  GRID_AREA_CODE
  DOCUMENT_ID
  RECEIVED_DATE_TIME
}

enum MeteringGridImbalanceValuesToInclude {
  IMBALANCES
  BALANCES
  BOTH
}

type MeteringGridAreaImbalanceSearchResponse {
  items: [MeteringGridAreaImbalanceSearchResult!]!
  totalCount: Int!
}

enum SortDirection {
  ASCENDING
  DESCENDING
}

enum ExchangeEventSortProperty {
  CALCULATION_TYPE
  CREATED
  DOCUMENT_ID
  DOCUMENT_STATUS
  GRID_AREA_CODE
  TIME_SERIES_TYPE
  LATEST_DISPATCHED
}

type ExchangeEventSearchResponse {
  items: [ExchangeEventSearchResult!]!
  totalCount: Int!
  gridAreaCount: Int!
}

type ExchangeEventStatusReportResponse {
  waitingForExternalResponse: Int!
}

type ReadinessStatusDto {
  component: ESettStageComponent!
  isReady: Boolean!
}

input CalculationQueryInput {
  gridAreaCodes: [String!]
  executionStates: [CalculationState!]
  calculationTypes: [CalculationType!]
  executionTime: DateRange
  period: DateRange
}

type AssociatedActors {
  email: String!
  actors: [UUID!]!
}

enum ESettStageComponent {
  INGESTION
  CONVERTER
  SENDER
  RECEIVER
}

type ImbalancePricePeriod {
  name: DateTime!
  priceAreaCode: PriceAreaCode!
  status: ImbalancePriceStatus!
}

type PermissionDetailsDto {
  id: Int!
  name: String!
  description: String!
  created: DateTime!
}

input CreateActorContactDtoInput {
  name: String!
  category: ContactCategory!
  email: String!
  phone: String
}

input CreateActorDtoInput {
  organizationId: UUID!
  name: ActorNameDtoInput!
  actorNumber: ActorNumberDtoInput!
  marketRoles: [ActorMarketRoleDtoInput!]!
}

input CreateOrganizationDtoInput {
  name: String!
  businessRegisterIdentifier: String!
  address: AddressDtoInput!
  domain: String!
}

scalar JSON

input AddressDtoInput {
  streetName: String
  number: String
  zipCode: String
  city: String
  country: String!
}

input ActorMarketRoleDtoInput {
  eicFunction: EicFunction!
  gridAreas: [ActorGridAreaDtoInput!]!
  comment: String
}

input ActorNumberDtoInput {
  value: String!
}

input ActorNameDtoInput {
  value: String!
}

input ActorGridAreaDtoInput {
  id: UUID!
  meteringPointTypes: [String!]!
}

input UpdateActorInput {
  actorId: UUID!
  actorName: String!
  departmentName: String!
  departmentEmail: String!
  departmentPhone: String!
}

union UpdateActorError = ApiError

type UpdateActorPayload {
  boolean: Boolean
  errors: [UpdateActorError!]
}

input CreateCalculationInput {
  period: DateRange!
  gridAreaCodes: [String!]!
  calculationType: CalculationType!
}

type CreateCalculationPayload {
  uuid: UUID
}

input CreateAggregatedMeasureDataRequestInput {
  processType: EdiB2CProcessType!
  meteringPointType: MeteringPointType
  startDate: String!
  endDate: String
  gridArea: String
  energySupplierId: String
  balanceResponsibleId: String
}

type CreateAggregatedMeasureDataRequestPayload {
  boolean: Boolean
}

input UpdateOrganizationInput {
  orgId: UUID!
  domain: String!
}

union UpdateOrganizationError = ApiError

type UpdateOrganizationPayload {
  boolean: Boolean
  errors: [UpdateOrganizationError!]
}

union CreateMarketParticipantError = ApiError

type CreateMarketParticipantPayload {
  boolean: Boolean
  errors: [CreateMarketParticipantError!]
}

input UpdateUserProfileInput {
  userProfileUpdateDto: UserProfileUpdateDtoInput!
}

union UpdateUserProfileError = ApiError

type UpdateUserProfilePayload {
  boolean: Boolean
  errors: [UpdateUserProfileError!]
}

type ResendWaitingEsettExchangeMessagesPayload {
  boolean: Boolean
}

input CreateDelegationsForActorInput {
  actorId: UUID!
  delegations: CreateProcessDelegationsDtoInput!
}

union CreateDelegationsForActorError = ApiError

type CreateDelegationsForActorPayload {
  boolean: Boolean
  errors: [CreateDelegationsForActorError!]
}

input StopDelegationInput {
  stopMessageDelegationDto: [StopProcessDelegationDtoInput!]!
}

union StopDelegationError = ApiError

type StopDelegationPayload {
  boolean: Boolean
  errors: [StopDelegationError!]
}