"""Represents a date range"""
scalar DateRange

enum ActorStatus {
  New
  Active
  Inactive
  Passive
}

type Actor {
  id: UUID!
  name: String!
  glnOrEicNumber: String!
  marketRole: EicFunction
  gridAreas: [GridAreaDto!]!
  organization: OrganizationDto!
  externalActorId: UUID
  status: ActorStatus!
}

"""An immutable calculation."""
type Calculation {
  id: UUID!
  period: DateRange!
  createdByUserName: String
  gridAreas: [GridAreaDto!]!
  statusType: ProcessStatus!
  runId: Long
  resolution: String
  unit: String
  executionTimeStart: DateTime
  executionTimeEnd: DateTime
  executionState: BatchState!
  areSettlementReportsCreated: Boolean!
  processType: ProcessType!
}

enum EicFunction {
  BalanceResponsibleParty
  BillingAgent
  EnergySupplier
  GridAccessProvider
  ImbalanceSettlementResponsible
  MeteredDataAdministrator
  MeteredDataResponsible
  MeteringPointAdministrator
  SystemOperator
  DanishEnergyAgency
  ElOverblik
  DataHubAdministrator
  IndependentAggregator
  SerialEnergyTrader
}

enum ExchangeEventProcessType {
  BALANCE_FIXING
  AGGREGATION
}

type Permission {
  userRoles: [UserRoleDto!]!
  id: Int!
  name: String!
  description: String!
  created: DateTime!
  assignableTo: [EicFunction!]!
}

enum ProcessStatus {
  warning
  success
  danger
  info
}

enum ApplyPolicy {
  BEFORE_RESOLVER
  AFTER_RESOLVER
  VALIDATION
}

type Query {
  permissionById(id: Int!): Permission!
  permissions(searchTerm: String!): [Permission!]!
  permissionLogs(id: Int!): [PermissionAuditLogViewDto!]!
  userRoleById(id: UUID!): UserRoleWithPermissionsDto!
  organizationById(id: UUID!): OrganizationDto!
  organizations: [OrganizationDto!]!
  gridAreas: [GridAreaDto!]!
  calculationById(id: UUID!): Calculation!
  calculations(executionTime: DateRange, executionStates: [BatchState!], processTypes: [ProcessType!], gridAreaCodes: [String!], period: DateRange, first: Int): [Calculation!]!
  settlementReports(gridAreaCodes: [String!], period: DateRange, executionTime: DateRange): [SettlementReport!]!
  actorById(id: UUID!): Actor!
  actors(eicFunctions: [EicFunction!]): [Actor!]!
  esettExchangeEventById(documentId: String!): ExchangeEventTrackingResult!
  esettExchangeEvents(pageNumber: Int!, pageSize: Int!, periodFrom: DateTime, periodTo: DateTime, gridAreaCode: String, processType: ExchangeEventProcessType, documentStatus: DocumentStatus, timeSeriesType: TimeSeriesType): ExchangeEventSearchResponse!
}

type Mutation {
  updatePermission(input: UpdatePermissionDtoInput!): Permission!
  createCalculation(input: CreateCalculationInput!): CreateCalculationPayload!
}

scalar UUID

type GridAreaDto {
  id: UUID!
  code: String!
  name: String!
  priceAreaCode: PriceAreaCode!
  validFrom: DateTime!
  validTo: DateTime
}

type OrganizationDto {
  organizationId: UUID!
  name: String!
  businessRegisterIdentifier: String!
  domain: String!
  comment: String!
  status: OrganizationStatus!
  address: AddressDto!
}

"""
The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

"""The `DateTime` scalar represents an ISO-8601 compliant date time type."""
scalar DateTime

enum BatchState {
  PENDING
  EXECUTING
  COMPLETED
  FAILED
}

"""Defines the wholesale process type"""
enum ProcessType {
  BALANCE_FIXING
  AGGREGATION
  WHOLESALE_FIXING
  FIRST_CORRECTION_SETTLEMENT
  SECOND_CORRECTION_SETTLEMENT
  THIRD_CORRECTION_SETTLEMENT
}

type UserRoleDto {
  id: UUID!
  name: String!
  description: String!
  eicFunction: EicFunction!
  status: UserRoleStatus!
}

type AddressDto {
  streetName: String
  number: String
  zipCode: String
  city: String
  country: String!
}

enum OrganizationStatus {
  NEW
  ACTIVE
  BLOCKED
  DELETED
}

enum PriceAreaCode {
  DK1
  DK2
}

input UpdatePermissionDtoInput {
  id: Int!
  description: String!
}

enum TimeSeriesType {
  MGA_EXCHANGE
  PRODUCTION
  CONSUMPTION
}

enum DocumentStatus {
  RECEIVED
  AWAITING_DISPATCH
  AWAITING_REPLY
  ACCEPTED
  REJECTED
}

type ExchangeEventSearchResponse {
  items: [ExchangeEventSearchResult!]!
  totalCount: Int!
}

type ExchangeEventTrackingResult {
  documentId: String!
  created: DateTime!
  gridAreaCode: String!
  processType: ExchangeEventProcessType!
  timeSeriesType: TimeSeriesType!
  periodFrom: DateTime!
  periodTo: DateTime!
  documentStatus: DocumentStatus!
}

type SettlementReport {
  batchNumber: UUID!
  processType: ProcessType!
  gridArea: GridAreaDto!
  period: DateRange!
  executionTime: DateTime
}

type UserRoleWithPermissionsDto {
  id: UUID!
  name: String!
  description: String!
  eicFunction: EicFunction!
  status: UserRoleStatus!
  permissions: [Permission!]!
}

type PermissionAuditLogViewDto {
  permissionId: Int!
  changedByUserId: UUID!
  changedByUserName: String!
  permissionAuditLogType: PermissionAuditLogType!
  timestamp: DateTime!
  value: String!
}

enum UserRoleStatus {
  ACTIVE
  INACTIVE
}

enum PermissionAuditLogType {
  UNKNOWN
  DESCRIPTION_CHANGE
  CREATED
}

type ExchangeEventSearchResult {
  documentId: String!
  gridAreaCode: String!
  processType: ExchangeEventProcessType!
  timeSeriesType: TimeSeriesType!
  documentStatus: DocumentStatus!
}

input CreateCalculationInput {
  period: DateRange!
  gridAreaCodes: [String!]!
  processType: ProcessType!
}

type CreateCalculationPayload {
  calculation: Calculation
}