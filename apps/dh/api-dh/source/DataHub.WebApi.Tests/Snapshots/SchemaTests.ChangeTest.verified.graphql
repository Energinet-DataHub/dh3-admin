schema {
  query: Query
  mutation: Mutation
}

interface Error {
  message: String!
}

type Actor {
  id: UUID!
  name: String!
  glnOrEicNumber: String!
  displayName: String!
  marketRole: EicFunction!
  userRoles: [ActorUserRole!]!
  status: ActorStatus!
  gridAreas: [GridAreaDto!]!
  contact: ActorContactDto
  organization: Organization!
  balanceResponsibleAgreements: [BalanceResponsibilityAgreement!]
  credentials: ActorCredentialsDto
  publicMail: ActorPublicMail
}

type ActorAuditedChangeAuditLogDto {
  auditedBy: String
  change: ActorAuditedChange!
  timestamp: DateTime!
  isInitialAssignment: Boolean!
  currentValue: String
  previousValue: String
}

type ActorCertificateCredentialsDto {
  thumbprint: String!
  expirationDate: DateTime!
}

type ActorClientSecretCredentialsDto {
  clientSecretIdentifier: UUID!
  expirationDate: DateTime!
}

type ActorClientSecretDto {
  secretText: String!
}

type ActorContactDto {
  contactId: UUID!
  actorId: UUID!
  category: ContactCategory!
  name: String!
  email: String!
  phone: String
}

type ActorCredentialsDto {
  assignCertificateCredentialsUrl(actorId: UUID!): String!
  removeActorCredentialsUrl(actorId: UUID!): String!
  certificateCredentials: ActorCertificateCredentialsDto
  clientSecretCredentials: ActorClientSecretCredentialsDto
}

type ActorNameDto {
  value: String!
}

type ActorNameWithId {
  id: UUID!
  actorName: ActorNameDto!
}

type ActorPublicMail {
  mail: String!
}

type ActorUserRole {
  id: UUID!
  name: String!
  status: UserRoleStatus!
  description: String!
  eicFunction: EicFunction!
  assigned: Boolean!
}

type AddTokenToDownloadUrlPayload {
  string: String
  errors: [AddTokenToDownloadUrlError!]
}

type AddressDto {
  streetName: String
  number: String
  zipCode: String
  city: String
  country: String!
}

type ApiError implements Error {
  message: String!
  apiErrors: [ApiErrorDescriptor!]!
  statusCode: Int!
  response: String
  headers: [KeyValuePairOfStringAndIEnumerableOfString!]!
}

type ApiErrorDescriptor {
  message: String!
  code: String!
  args: JSON!
}

type ArchivedMessage {
  sender: Actor
  receiver: Actor
  documentUrl: String
  recordId: Long!
  id: String!
  messageId: String
  documentType: DocumentType!
  senderRole: ActorRole
  receiverRole: ActorRole
  createdAt: DateTime!
  businessReason: String
}

"A connection to a list of items."
type ArchivedMessagesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ArchivedMessagesEdge!]
  "A flattened list of the nodes."
  nodes: [ArchivedMessage!]
}

"An edge in a connection."
type ArchivedMessagesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: ArchivedMessage!
}

type AssociatedActors {
  email: String!
  actors: [UUID!]!
}

type BalanceResponsibilityAgreement {
  meteringPointType: MarketParticipantMeteringPointType!
  gridArea: GridAreaDto
  energySupplierWithName: ActorNameWithId
  balanceResponsibleWithName: ActorNameWithId
  validPeriod: DateRange!
  status: BalanceResponsibilityAgreementStatus!
}

type BalanceResponsibleImport {
  balanceResponsibleImportUrl: String!
}

type BalanceResponsiblePageResult {
  balanceResponsiblesUrl(locale: String!): String
  page: [BalanceResponsibleType!]!
  totalCount: Int!
}

type BalanceResponsibleType {
  validPeriod: DateRange!
  storageDocumentUrl: String
  gridAreaWithName: GridAreaDto
  supplierWithName: ActorNameDto
  balanceResponsibleWithName: ActorNameDto
  id: String!
  receivedDateTime: DateTime!
  supplier: String!
  balanceResponsible: String!
  meteringPointType: BalanceResponsibilityMeteringPointType!
  gridArea: String!
}

type CVROrganizationResult {
  name: String!
  hasResult: Boolean!
}

"An immutable calculation."
type Calculation {
  id: UUID!
  "Defines the wholesale calculation type"
  calculationType: CalculationType!
  period: DateRange!
  executionTimeStart: DateTime!
  executionTimeEnd: DateTime
  createdByUserName: String
  gridAreas: [GridAreaDto!]!
  state: CalculationOrchestrationState!
  executionType: CalculationExecutionType!
  statusType: ProcessStatus!
  currentStep: CalculationProgressStep!
  progress: [CalculationProgress!]!
}

type CalculationProgress {
  step: CalculationProgressStep!
  status: ProgressStatus!
}

"A connection to a list of items."
type CalculationsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [CalculationsEdge!]
  "A flattened list of the nodes."
  nodes: [Calculation!]
}

"An edge in a connection."
type CalculationsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Calculation!
}

type CancelScheduledCalculationPayload {
  boolean: Boolean
}

type CancelSettlementReportPayload {
  boolean: Boolean
}

"Information about the offset pagination."
type CollectionSegmentInfo {
  "Indicates whether more items exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more items exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
}

type CreateCalculationPayload {
  uuid: UUID
}

type CreateDelegationsForActorPayload {
  boolean: Boolean
  errors: [CreateDelegationsForActorError!]
}

type CreateMarketParticipantPayload {
  boolean: Boolean
  errors: [CreateMarketParticipantError!]
}

type CreateUserRolePayload {
  boolean: Boolean
  errors: [CreateUserRoleError!]
}

type DeactivateUserPayload {
  boolean: Boolean
  errors: [DeactivateUserError!]
}

type DeactivateUserRolePayload {
  boolean: Boolean
  errors: [DeactivateUserRoleError!]
}

type DismissNotificationPayload {
  boolean: Boolean
  errors: [DismissNotificationError!]
}

type EsettOutgoingMessage {
  period: DateRange!
  dispatchDocumentUrl: String
  responseDocumentUrl: String!
  gridArea: GridAreaDto
  documentId: String!
  created: DateTime!
  calculationType: ExchangeEventCalculationType!
  timeSeriesType: EsettTimeSeriesType!
  documentStatus: DocumentStatus!
  lastDispatched: DateTime
  manuallyHandledExchangeEventMetaData: ManuallyHandledExchangeEventMetaData
}

type ExchangeEventSearchResponse {
  items: [ExchangeEventSearchResult!]!
  totalCount: Int!
  gridAreaCount: Int!
}

type ExchangeEventSearchResult {
  gridArea: GridAreaDto
  energySupplier: ActorNameDto
  documentId: String!
  actorNumber: String
  gridAreaCodeOut: String
  created: DateTime!
  calculationType: ExchangeEventCalculationType!
  timeSeriesType: EsettTimeSeriesType!
  documentStatus: DocumentStatus!
  lastDispatched: DateTime
}

type ExchangeEventStatusReportResponse {
  waitingForExternalResponse: Int!
}

"A connection to a list of items."
type FilteredUserRolesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [FilteredUserRolesEdge!]
  "A flattened list of the nodes."
  nodes: [UserRoleDto!]
}

"An edge in a connection."
type FilteredUserRolesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: UserRoleDto!
}

type GetUserOverviewResponse {
  users: [UserOverviewItemDto!]!
  totalUserCount: Int!
}

type GetUserProfileResponse {
  firstName: String!
  lastName: String!
  phoneNumber: String!
  hasFederatedLogin: Boolean!
}

type GetUserResponse {
  actors: [Actor!]!
  administratedBy: Actor
  id: UUID!
  name: String!
  status: UserStatus!
  firstName: String!
  lastName: String!
  email: String!
  phoneNumber: String
  createdDate: DateTime!
  latestLoginAt: DateTime
}

type GridAreaDto {
  priceAreaCode: PriceAreaCode!
  displayName: String!
  status: GridAreaStatus!
  includedInCalculation: Boolean!
  id: UUID!
  code: String!
  name: String!
  type: GridAreaType!
  validFrom: DateTime!
  validTo: DateTime
}

type GridAreaOverviewItemDto {
  priceAreaCode: PriceAreaCode!
  displayName: String!
  status: GridAreaStatus!
  id: UUID!
  code: String!
  name: String!
  validFrom: DateTime!
  validTo: DateTime
  actorNumber: String
  actorName: String
  organizationName: String
  fullFlexDate: DateTime
  type: GridAreaType!
}

"Imbalance price"
type ImbalancePrice {
  priceAreaCode: PriceAreaCode!
  timestamp: DateTime!
  price: Float
}

"Imbalance price for a given date"
type ImbalancePriceDaily {
  status: ImbalancePriceStatus!
  imbalancePricesDownloadImbalanceUrl: String!
  timeStamp: DateTime!
  imbalancePrices: [ImbalancePrice!]!
  importedAt: DateTime
}

type ImbalancePricePeriod {
  name: DateTime!
  priceAreaCode: PriceAreaCode!
  status: ImbalancePriceStatus!
}

type ImbalancePricesOverview {
  uploadImbalancePricesUrl: String!
  pricePeriods: [ImbalancePricePeriod!]!
}

type InitiateMitIdSignupPayload {
  boolean: Boolean
  errors: [InitiateMitIdSignupError!]
}

type InviteUserPayload {
  boolean: Boolean
  errors: [InviteUserError!]
}

type KeyValuePairOfStringAndIEnumerableOfString {
  key: String!
  value: [String!]!
}

type KeyValuePairOfStringAndListOfRequestSettlementReportGridAreaCalculation {
  key: String!
  value: [RequestSettlementReportGridAreaCalculation!]!
}

type ManuallyHandleOutgoingMessagePayload {
  boolean: Boolean
}

type ManuallyHandledExchangeEventMetaData {
  manuallyHandledByIdentityDisplayName: String!
  comment: String!
  manuallyHandledAt: DateTime!
}

type MergeMarketParticipantsPayload {
  boolean: Boolean
  errors: [MergeMarketParticipantsError!]
}

type MessageDelegationType {
  gridArea: GridAreaDto
  delegatedBy: Actor
  delegatedTo: Actor
  status: ActorDelegationStatus!
  id: UUID!
  periodId: UUID!
  process: DelegatedProcess!
  validPeriod: DateRange!
}

type MeteringGridAreaImbalancePerDayDto {
  imbalanceDay: DateTime!
  firstOccurrenceOfImbalance: DateTime!
  firstPositionOfImbalance: Int!
  quantity: Float!
}

type MeteringGridAreaImbalanceSearchResponse {
  items: [MeteringGridAreaImbalanceSearchResult!]!
  totalCount: Int!
}

type MeteringGridAreaImbalanceSearchResult {
  period: DateRange!
  mgaImbalanceDocumentUrl: String
  gridArea: GridAreaDto
  id: String!
  documentDateTime: DateTime!
  receivedDateTime: DateTime!
  incomingImbalancePerDay: [MeteringGridAreaImbalancePerDayDto!]!
  outgoingImbalancePerDay: [MeteringGridAreaImbalancePerDayDto!]!
}

type Mutation {
  updateActor(input: UpdateActorInput!): UpdateActorPayload!
  createMarketParticipant(input: CreateMarketParticipantInput!): CreateMarketParticipantPayload!
  createDelegationsForActor(input: CreateDelegationsForActorInput!): CreateDelegationsForActorPayload!
  stopDelegation(input: StopDelegationInput!): StopDelegationPayload!
  requestClientSecretCredentials(input: RequestClientSecretCredentialsInput!): RequestClientSecretCredentialsPayload!
  createCalculation(input: CreateCalculationInput!): CreateCalculationPayload!
  cancelScheduledCalculation(input: CancelScheduledCalculationInput!): CancelScheduledCalculationPayload!
  requestCalculation(input: RequestCalculationInput!): RequestCalculationPayload!
  resendWaitingEsettExchangeMessages: ResendWaitingEsettExchangeMessagesPayload!
  manuallyHandleOutgoingMessage(input: ManuallyHandleOutgoingMessageInput!): ManuallyHandleOutgoingMessagePayload!
  mergeMarketParticipants(input: MergeMarketParticipantsInput!): MergeMarketParticipantsPayload!
  dismissNotification(input: DismissNotificationInput!): DismissNotificationPayload!
  updateOrganization(input: UpdateOrganizationInput!): UpdateOrganizationPayload!
  updatePermission(input: UpdatePermissionInput!): UpdatePermissionPayload!
  requestSettlementReport(requestSettlementReportInput: RequestSettlementReportInput!): RequestSettlementReportPayload!
  cancelSettlementReport(input: CancelSettlementReportInput!): CancelSettlementReportPayload!
  addTokenToDownloadUrl(input: AddTokenToDownloadUrlInput!): AddTokenToDownloadUrlPayload!
  updateUserProfile(input: UpdateUserProfileInput!): UpdateUserProfilePayload!
  updateUserIdentity(input: UpdateUserIdentityInput!): UpdateUserIdentityPayload!
  inviteUser(input: InviteUserInput!): InviteUserPayload!
  reInviteUser(input: ReInviteUserInput!): ReInviteUserPayload!
  resetTwoFactorAuthentication(input: ResetTwoFactorAuthenticationInput!): ResetTwoFactorAuthenticationPayload!
  deactivateUser(input: DeactivateUserInput!): DeactivateUserPayload!
  reActivateUser(input: ReActivateUserInput!): ReActivateUserPayload!
  initiateMitIdSignup: InitiateMitIdSignupPayload!
  updateUserRoleAssignment(input: UpdateUserRoleAssignmentInput!): UpdateUserRoleAssignmentPayload!
  updateUserRole(input: UpdateUserRoleInput!): UpdateUserRolePayload!
  createUserRole(input: CreateUserRoleInput!): CreateUserRolePayload!
  deactivateUserRole(input: DeactivateUserRoleInput!): DeactivateUserRolePayload!
}

type NotificationDto {
  notificationType: NotificationType!
  id: Int!
  occurredAt: DateTime!
  expiresAt: DateTime!
  relatedToId: String
}

type Organization {
  id: UUID!
  actors: [Actor!]
  name: String!
  businessRegisterIdentifier: String!
  domains: [String!]!
  status: String!
  address: AddressDto!
}

type OrganizationAuditedChangeAuditLogDto {
  auditedBy: String
  change: OrganizationAuditedChange!
  timestamp: DateTime!
  isInitialAssignment: Boolean!
  currentValue: String
  previousValue: String
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

type Permission {
  userRoles: [UserRoleDto!]!
  id: Int!
  name: String!
  description: String!
  created: DateTime!
  assignableTo: [EicFunction!]!
}

type PermissionAuditedChangeAuditLogDto {
  auditedBy: String
  change: PermissionAuditedChange!
  timestamp: DateTime!
  isInitialAssignment: Boolean!
  currentValue: String
  previousValue: String
}

type PermissionDetailsDto {
  id: Int!
  name: String!
  description: String!
  created: DateTime!
}

type Permissions {
  getPermissionRelationsUrl: String!
  permissions: [Permission!]!
}

type Query {
  actorAuditLogs(actorId: UUID!): [ActorAuditedChangeAuditLogDto!]!
  selectedActor: Actor!
  actorById(id: UUID!): Actor!
  actors: [Actor!]!
  actorsByOrganizationId(organizationId: UUID!): [Actor!]!
  actorsForEicFunction(eicFunctions: [EicFunction!]): [Actor!]!
  delegationsForActor(actorId: UUID!): [MessageDelegationType!]!
  associatedActors(email: String!): AssociatedActors!
  filteredActors: [Actor!]!
  selectionActors: [SelectionActorDto!]!
  balanceResponsibleImport: BalanceResponsibleImport!
  calculationById(id: UUID!): Calculation!
  calculations(input: CalculationQueryInput! filter: String "Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String order: [CalculationSortInput!]): CalculationsConnection
  latestBalanceFixing(period: DateRange!): Calculation @deprecated(reason: "Use `latestCalculation` instead")
  latestCalculation(period: DateRange! calculationType: CalculationType!): Calculation
  esettServiceStatus: [ReadinessStatusDto!]!
  esettExchangeStatusReport: ExchangeEventStatusReportResponse!
  esettOutgoingMessageById(documentId: String!): EsettOutgoingMessage!
  esettExchangeEvents(pageNumber: Int! pageSize: Int! periodInterval: DateRange createdInterval: DateRange sentInterval: DateRange gridAreaCodes: [String!] calculationType: ExchangeEventCalculationType documentStatuses: [DocumentStatus!] timeSeriesType: EsettTimeSeriesType documentId: String sortProperty: ExchangeEventSortProperty! sortDirection: SortDirection! actorNumber: String): ExchangeEventSearchResponse!
  downloadEsettExchangeEvents(locale: String! periodInterval: DateRange createdInterval: DateRange sentInterval: DateRange gridAreaCodes: [String!] calculationType: ExchangeEventCalculationType documentStatuses: [DocumentStatus!] timeSeriesType: EsettTimeSeriesType documentId: String sortProperty: ExchangeEventSortProperty! sortDirection: SortDirection! actorNumber: String): String!
  meteringGridAreaImbalance(pageNumber: Int! pageSize: Int! createdFrom: DateTime createdTo: DateTime calculationPeriod: DateRange gridAreaCodes: [String!] documentId: String valuesToInclude: MeteringGridImbalanceValuesToInclude! sortProperty: MeteringGridAreaImbalanceSortProperty! sortDirection: SortDirection!): MeteringGridAreaImbalanceSearchResponse!
  downloadMeteringGridAreaImbalance(locale: String! createdFrom: DateTime createdTo: DateTime calculationPeriod: DateRange gridAreaCodes: [String!] documentId: String valuesToInclude: MeteringGridImbalanceValuesToInclude! sortProperty: MeteringGridAreaImbalanceSortProperty! sortDirection: SortDirection!): String!
  balanceResponsible(pageNumber: Int! pageSize: Int! sortProperty: BalanceResponsibleSortProperty! sortDirection: SortDirection!): BalanceResponsiblePageResult!
  gridAreaOverview: [GridAreaOverviewItemDto!]!
  gridAreas: [GridAreaDto!]!
  imbalancePricesOverview: ImbalancePricesOverview!
  imbalancePricesForMonth(year: Int! month: Int! areaCode: PriceAreaCode!): [ImbalancePriceDaily!]!
  archivedMessages(created: DateRange! senderId: UUID receiverId: UUID documentTypes: [DocumentType!] businessReasons: [BusinessReason!] includeRelated: Boolean filter: String "Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String order: ArchivedMessageSortInput): ArchivedMessagesConnection
  notifications: [NotificationDto!]!
  organizationAuditLogs(organizationId: UUID!): [OrganizationAuditedChangeAuditLogDto!]!
  organizationById(id: UUID!): Organization!
  organizations: [Organization!]!
  searchOrganizationInCVR(cvr: String!): CVROrganizationResult!
  permissionById(id: Int!): Permission!
  permissions(searchTerm: String!): Permissions!
  permissionAuditLogs(id: Int!): [PermissionAuditedChangeAuditLogDto!]!
  permissionsByEicFunction(eicFunction: EicFunction!): [PermissionDetailsDto!]!
  settlementReports: [SettlementReport!]!
  settlementReportGridAreaCalculationsForPeriod(calculationType: CalculationType! gridAreaId: [String!]! calculationPeriod: DateRange!): [KeyValuePairOfStringAndListOfRequestSettlementReportGridAreaCalculation!]!
  settlementReport(requestId: SettlementReportRequestIdInput!): SettlementReport!
  userRoleAuditLogs(id: UUID!): [UserRoleAuditedChangeAuditLogDto!]!
  userAuditLogs(id: UUID!): [UserAuditedChangeAuditLogDto!]!
  userProfile: GetUserProfileResponse!
  userById(id: UUID!): GetUserResponse!
  domainExists(emailAddress: String!): Boolean!
  knownEmails: [String!]!
  userOverviewSearch(pageNumber: Int! pageSize: Int! sortProperty: UserOverviewSortProperty! sortDirection: MarketParticipantSortDirctionType! actorId: UUID searchText: String userRoleIds: [UUID!] userStatus: [UserStatus!]): GetUserOverviewResponse!
  users(skip: Int take: Int actorId: UUID userRoleIds: [UUID!] userStatus: [UserStatus!] filter: String order: UsersSortInput): UsersCollectionSegment
  userRolesByActorId(actorId: UUID!): [UserRoleDto!]!
  userRolesByEicFunction(eicFunction: EicFunction!): [UserRoleDto!]!
  userRoleById(id: UUID!): UserRoleWithPermissions!
  userRoles: [UserRoleDto!]! @deprecated(reason: "Use `GetUserRolesAsync` with filter, sort and paging instead.")
  filteredUserRoles(status: UserRoleStatus eicFunctions: [EicFunction!] filter: String "Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String order: [UserRoleSortInput!]): FilteredUserRolesConnection
}

type ReActivateUserPayload {
  boolean: Boolean
  errors: [ReActivateUserError!]
}

type ReInviteUserPayload {
  boolean: Boolean
  errors: [ReInviteUserError!]
}

type ReadinessStatusDto {
  component: ESettStageComponent!
  isReady: Boolean!
}

type RequestCalculationPayload {
  boolean: Boolean
}

type RequestClientSecretCredentialsPayload {
  actorClientSecretDto: ActorClientSecretDto
}

type RequestSettlementReportGridAreaCalculation {
  gridAreaWithName: GridAreaDto
  calculationId: UUID!
  calculationDate: DateTime!
}

type RequestSettlementReportPayload {
  boolean: Boolean
}

type ResendWaitingEsettExchangeMessagesPayload {
  boolean: Boolean
}

type ResetTwoFactorAuthenticationPayload {
  boolean: Boolean
  errors: [ResetTwoFactorAuthenticationError!]
}

type SelectionActorDto {
  id: UUID!
  gln: String!
  actorName: String!
  organizationName: String!
  marketRole: EicFunction!
}

type SettlementReport {
  settlementReportDownloadUrl: String
  actor: Actor
  id: String!
  requestedByActorId: UUID!
  calculationType: CalculationType!
  period: DateRange!
  numberOfGridAreasInReport: Int!
  includesBasisData: Boolean!
  statusMessage: String!
  progress: Float!
  statusType: SettlementReportStatusType!
  executionTime: DateRange!
  fromApi: Boolean!
  combineResultInASingleFile: Boolean!
  includeMonthlyAmount: Boolean!
  gridAreas: [String!]!
}

type StopDelegationPayload {
  boolean: Boolean
  errors: [StopDelegationError!]
}

type UpdateActorPayload {
  boolean: Boolean
  errors: [UpdateActorError!]
}

type UpdateOrganizationPayload {
  boolean: Boolean
  errors: [UpdateOrganizationError!]
}

type UpdatePermissionPayload {
  permission: Permission
  errors: [UpdatePermissionError!]
}

type UpdateUserIdentityPayload {
  boolean: Boolean
  errors: [UpdateUserIdentityError!]
}

type UpdateUserProfilePayload {
  boolean: Boolean
  errors: [UpdateUserProfileError!]
}

type UpdateUserRoleAssignmentPayload {
  boolean: Boolean
  errors: [UpdateUserRoleAssignmentError!]
}

type UpdateUserRolePayload {
  boolean: Boolean
  errors: [UpdateUserRoleError!]
}

type UserAuditedChangeAuditLogDto {
  auditedBy: String
  affectedActorName: String
  affectedUserRoleName: String
  change: UserAuditedChange!
  timestamp: DateTime!
  isInitialAssignment: Boolean!
  currentValue: String
  previousValue: String
}

type UserOverviewItemDto {
  name: String!
  actors: [Actor!]!
  administratedBy: Actor
  id: UUID!
  status: UserStatus!
  firstName: String!
  lastName: String!
  email: String!
  phoneNumber: String
  createdDate: DateTime!
  latestLoginAt: DateTime
}

type UserRoleAuditedChangeAuditLogDto {
  auditedBy: String
  affectedPermissionName: String
  change: UserRoleAuditedChange!
  timestamp: DateTime!
  isInitialAssignment: Boolean!
  currentValue: String
  previousValue: String
}

type UserRoleDto {
  id: UUID!
  name: String!
  description: String!
  eicFunction: EicFunction!
  status: UserRoleStatus!
}

type UserRoleWithPermissions {
  userRoles: [UserRoleDto!]!
  id: UUID!
  name: String!
  description: String!
  eicFunction: EicFunction!
  status: UserRoleStatus!
  permissions: [PermissionDetailsDto!]!
}

"A segment of a collection."
type UsersCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [UserOverviewItemDto!]
}

union AddTokenToDownloadUrlError = ApiError

union CreateDelegationsForActorError = ApiError

union CreateMarketParticipantError = ApiError

union CreateUserRoleError = ApiError

union DeactivateUserError = ApiError

union DeactivateUserRoleError = ApiError

union DismissNotificationError = ApiError

union InitiateMitIdSignupError = ApiError

union InviteUserError = ApiError

union MergeMarketParticipantsError = ApiError

union ReActivateUserError = ApiError

union ReInviteUserError = ApiError

union ResetTwoFactorAuthenticationError = ApiError

union StopDelegationError = ApiError

union UpdateActorError = ApiError

union UpdateOrganizationError = ApiError

union UpdatePermissionError = ApiError

union UpdateUserIdentityError = ApiError

union UpdateUserProfileError = ApiError

union UpdateUserRoleAssignmentError = ApiError

union UpdateUserRoleError = ApiError

input ActorNameDtoInput {
  value: String!
}

input ActorNumberDtoInput {
  value: String!
}

input AddTokenToDownloadUrlInput {
  downloadUrl: URL!
}

input AddressDtoInput {
  streetName: String
  number: String
  zipCode: String
  city: String
  country: String!
}

input ArchivedMessageSortInput {
  messageId: SortEnumType
  documentType: SortEnumType
  sender: SortEnumType
  receiver: SortEnumType
  createdAt: SortEnumType
}

input CalculationQueryInput {
  gridAreaCodes: [String!]
  states: [CalculationOrchestrationState!]
  executionType: CalculationExecutionType
  calculationTypes: [CalculationType!]
  executionTime: DateRange
  period: DateRange
}

"An immutable calculation."
input CalculationSortInput {
  "Defines the wholesale calculation type"
  calculationType: SortEnumType
  isInternalCalculation: SortEnumType
  executionTime: SortEnumType
  status: SortEnumType
  period: SortEnumType
  executionType: SortEnumType
}

input CancelScheduledCalculationInput {
  calculationId: UUID!
}

input CancelSettlementReportInput {
  requestId: SettlementReportRequestIdInput!
}

input CreateActorContactDtoInput {
  name: String!
  category: ContactCategory!
  email: String!
  phone: String
}

input CreateActorGridAreaInput {
  code: String!
  meteringPointTypes: [String!]!
}

input CreateActorInput {
  organizationId: UUID!
  name: ActorNameDtoInput!
  actorNumber: ActorNumberDtoInput!
  marketRole: CreateActorMarketRoleInput!
}

input CreateActorMarketRoleInput {
  eicFunction: EicFunction!
  gridAreas: [CreateActorGridAreaInput!]!
  comment: String
}

input CreateCalculationInput {
  executionType: CalculationExecutionType!
  period: DateRange!
  gridAreaCodes: [String!]!
  calculationType: CalculationType!
  scheduledAt: DateTime
}

input CreateDelegationsForActorInput {
  actorId: UUID!
  delegations: CreateProcessDelegationsInput!
}

input CreateMarketParticipantInput {
  organizationId: UUID
  organization: CreateOrganizationDtoInput
  actor: CreateActorInput!
  actorContact: CreateActorContactDtoInput!
}

input CreateOrganizationDtoInput {
  name: String!
  businessRegisterIdentifier: String!
  address: AddressDtoInput!
  domains: [String!]!
}

input CreateProcessDelegationsInput {
  delegatedFrom: UUID!
  delegatedTo: UUID!
  gridAreas: [String!]!
  delegatedProcesses: [DelegatedProcess!]!
  startsAt: DateTime!
}

input CreateUserRoleDtoInput {
  name: String!
  description: String!
  status: UserRoleStatus!
  eicFunction: EicFunction!
  permissions: [Int!]!
}

input CreateUserRoleInput {
  userRole: CreateUserRoleDtoInput!
}

input DeactivateUserInput {
  userId: UUID!
}

input DeactivateUserRoleInput {
  roleId: UUID!
}

input DismissNotificationInput {
  notificationId: Int!
}

input InvitationUserDetailsDtoInput {
  firstName: String!
  lastName: String!
  phoneNumber: String!
}

input InviteUserInput {
  userInviteDto: UserInvitationDtoInput!
}

input ManuallyHandleOutgoingMessageInput {
  documentId: String!
  comment: String!
}

input MergeMarketParticipantsInput {
  survivingEntity: UUID!
  discontinuedEntity: UUID!
  mergeDate: DateTime!
}

input ReActivateUserInput {
  userId: UUID!
}

input ReInviteUserInput {
  userId: UUID!
}

input RequestCalculationInput {
  calculationType: CalculationType!
  period: DateRange!
  requestCalculationDataType: RequestCalculationDataType!
  gridArea: String
  energySupplierId: String
  balanceResponsibleId: String
}

input RequestClientSecretCredentialsInput {
  actorId: UUID!
}

input RequestSettlementReportGridAreaInput {
  calculationId: UUID
  gridAreaCode: String!
}

input RequestSettlementReportInput {
  calculationType: CalculationType!
  period: DateRange!
  gridAreasWithCalculations: [RequestSettlementReportGridAreaInput!]!
  combineResultInASingleFile: Boolean!
  preventLargeTextFiles: Boolean!
  includeMonthlySums: Boolean!
  includeBasisData: Boolean!
  useApi: Boolean!
  energySupplier: String
  csvLanguage: String
  requestAsActorId: String
  requestAsMarketRole: SettlementReportMarketRole
}

input ResetTwoFactorAuthenticationInput {
  userId: UUID!
}

input SettlementReportRequestIdInput {
  id: String!
}

input StopDelegationInput {
  stopDelegationPeriods: [StopDelegationPeriodInput!]!
}

input StopDelegationPeriodInput {
  delegationId: UUID!
  stopPeriod: StopProcessDelegationDtoInput!
}

input StopProcessDelegationDtoInput {
  periodId: UUID!
  stopsAt: DateTime
}

input UpdateActorInput {
  actorId: UUID!
  actorName: String!
  departmentName: String!
  departmentEmail: String!
  departmentPhone: String!
}

input UpdateActorUserRolesInput {
  actorId: UUID!
  assignments: UpdateUserRoleAssignmentsDtoInput!
}

input UpdateOrganizationInput {
  orgId: UUID!
  domains: [String!]!
}

input UpdatePermissionInput {
  id: Int!
  description: String!
}

input UpdateUserIdentityInput {
  userId: UUID!
  userIdentityUpdateDto: UserIdentityUpdateDtoInput!
}

input UpdateUserProfileInput {
  userProfileUpdateDto: UserProfileUpdateDtoInput!
}

input UpdateUserRoleAssignmentInput {
  userId: UUID!
  input: [UpdateActorUserRolesInput!]!
}

input UpdateUserRoleAssignmentsDtoInput {
  added: [UUID!]!
  removed: [UUID!]!
}

input UpdateUserRoleDtoInput {
  name: String!
  description: String!
  status: UserRoleStatus!
  permissions: [Int!]!
}

input UpdateUserRoleInput {
  userRoleId: UUID!
  userRole: UpdateUserRoleDtoInput!
}

input UserIdentityUpdateDtoInput {
  firstName: String!
  lastName: String!
  phoneNumber: String!
}

input UserInvitationDtoInput {
  email: String!
  invitationUserDetails: InvitationUserDetailsDtoInput
  assignedActor: UUID!
  assignedRoles: [UUID!]!
}

input UserProfileUpdateDtoInput {
  firstName: String!
  lastName: String!
  phoneNumber: String!
}

input UserRoleSortInput {
  name: SortEnumType
  eicFunction: SortEnumType
  status: SortEnumType
}

input UsersSortInput {
  name: SortEnumType
  email: SortEnumType
  phoneNumber: SortEnumType
  latestLoginAt: SortEnumType
  status: SortEnumType
}

enum ActorAuditedChange {
  NAME
  STATUS
  CONTACT_NAME
  CONTACT_EMAIL
  CONTACT_PHONE
  CONTACT_CATEGORY_ADDED
  CONTACT_CATEGORY_REMOVED
  CERTIFICATE_CREDENTIALS
  CLIENT_SECRET_CREDENTIALS
  DELEGATION_START
  DELEGATION_STOP
}

enum ActorDelegationStatus {
  AWAITING
  ACTIVE
  EXPIRED
  CANCELLED
}

enum ActorRole {
  METERING_POINT_ADMINISTRATOR
  ENERGY_SUPPLIER
  GRID_ACCESS_PROVIDER
  METERED_DATA_ADMINISTRATOR
  METERED_DATA_RESPONSIBLE
  BALANCE_RESPONSIBLE_PARTY
  IMBALANCE_SETTLEMENT_RESPONSIBLE
  SYSTEM_OPERATOR
  DANISH_ENERGY_AGENCY
  DELEGATED
  DATA_HUB_ADMINISTRATOR
}

enum ActorStatus {
  New
  Active
  Inactive
  Passive
}

"Represents the status of a balance responsibility agreement."
enum BalanceResponsibilityAgreementStatus {
  AWAITING
  ACTIVE
  SOON_TO_EXPIRE
  EXPIRED
}

enum BalanceResponsibilityMeteringPointType {
  MgaExchange
  Production
  Consumption
}

enum BalanceResponsibleSortProperty {
  VALID_FROM
  VALID_TO
  RECEIVED_DATE
}

enum BusinessReason {
  D03
  D04
  D05
  D32
}

enum CalculationExecutionType {
  EXTERNAL
  INTERNAL
}

enum CalculationOrchestrationState {
  SCHEDULED
  CALCULATING
  CALCULATED
  CALCULATION_FAILED
  ACTOR_MESSAGES_ENQUEUING
  ACTOR_MESSAGES_ENQUEUED
  ACTOR_MESSAGES_ENQUEUING_FAILED
  COMPLETED
  CANCELED
  STARTED
}

enum CalculationProgressStep {
  SCHEDULE
  CALCULATE
  ACTOR_MESSAGE_ENQUEUE
}

"Defines the wholesale calculation type"
enum CalculationType {
  BALANCE_FIXING
  AGGREGATION
  WHOLESALE_FIXING
  FIRST_CORRECTION_SETTLEMENT
  SECOND_CORRECTION_SETTLEMENT
  THIRD_CORRECTION_SETTLEMENT
}

enum ContactCategory {
  DEFAULT
  CHARGES
  CHARGE_LINKS
  ELECTRICAL_HEATING
  END_OF_SUPPLY
  ENERGINET_INQUIRY
  ERROR_REPORT
  INCORRECT_MOVE
  INCORRECT_SWITCH
  MEASUREMENT_DATA
  METERING_POINT
  NET_SETTLEMENT
  NOTIFICATION
  RECON
  REMINDER
}

enum DelegatedProcess {
  REQUEST_ENERGY_RESULTS
  RECEIVE_ENERGY_RESULTS
  REQUEST_WHOLESALE_RESULTS
  RECEIVE_WHOLESALE_RESULTS
  REQUEST_METERING_POINT_DATA
  RECEIVE_METERING_POINT_DATA
}

enum DocumentStatus {
  RECEIVED
  AWAITING_DISPATCH
  AWAITING_REPLY
  ACCEPTED
  REJECTED
  BIZ_TALK_ACCEPTED
  MANUALLY_HANDLED
}

enum DocumentType {
  B2C_REQUEST_AGGREGATED_MEASURE_DATA
  B2C_REQUEST_WHOLESALE_SETTLEMENT
  NOTIFY_AGGREGATED_MEASURE_DATA
  NOTIFY_WHOLESALE_SERVICES
  REJECT_REQUEST_AGGREGATED_MEASURE_DATA
  REJECT_REQUEST_WHOLESALE_SETTLEMENT
  REQUEST_AGGREGATED_MEASURE_DATA
  REQUEST_WHOLESALE_SETTLEMENT
}

enum ESettStageComponent {
  INGESTION
  CONVERTER
  SENDER
  RECEIVER
}

enum EicFunction {
  BalanceResponsibleParty
  BillingAgent
  EnergySupplier
  GridAccessProvider
  ImbalanceSettlementResponsible
  MeterOperator
  MeteredDataAdministrator
  MeteredDataResponsible
  MeteringPointAdministrator
  SystemOperator
  DanishEnergyAgency
  DataHubAdministrator
  IndependentAggregator
  SerialEnergyTrader
  Delegated
  ItSupplier
}

enum EsettTimeSeriesType {
  MgaExchange
  Production
  Consumption
}

enum ExchangeEventCalculationType {
  BALANCE_FIXING
  AGGREGATION
}

enum ExchangeEventSortProperty {
  CALCULATION_TYPE
  CREATED
  DOCUMENT_ID
  DOCUMENT_STATUS
  GRID_AREA_CODE
  TIME_SERIES_TYPE
  LATEST_DISPATCHED
}

enum GridAreaStatus {
  Created
  Active
  Expired
  Archived
}

enum GridAreaType {
  NotSet
  Transmission
  Distribution
  Other
  Test
  GridLossDK
  GridLossAbroad
  Aboard
}

enum ImbalancePriceStatus {
  NO_DATA
  IN_COMPLETE
  COMPLETE
}

enum MarketParticipantMeteringPointType {
  Unknown
  D01VeProduction
  D02Analysis
  D03NotUsed
  D04SurplusProductionGroup6
  D05NetProduction
  D06SupplyToGrid
  D07ConsumptionFromGrid
  D08WholeSaleServicesInformation
  D09OwnProduction
  D10NetFromGrid
  D11NetToGrid
  D12TotalConsumption
  D13NetLossCorrection
  D14ElectricalHeating
  D15NetConsumption
  D17OtherConsumption
  D18OtherProduction
  D20ExchangeReactiveEnergy
  D99InternalUse
  E17Consumption
  E18Production
  E20Exchange
}

enum MarketParticipantSortDirctionType {
  Asc
  Desc
}

enum MeteringGridAreaImbalanceSortProperty {
  DOCUMENT_DATE_TIME
  GRID_AREA_CODE
  DOCUMENT_ID
  RECEIVED_DATE_TIME
}

enum MeteringGridImbalanceValuesToInclude {
  IMBALANCES
  BALANCES
  BOTH
}

enum NotificationType {
  BalanceResponsibilityValidationFailed
  BalanceResponsibilityActorUnrecognized
  SettlementReportReadyForDownload
  SettlementReportFailed
  NewBalanceResponsibilityReceived
  MeteringGridAreaIsImbalanced
  ActorCredentialsExpiring
}

enum OrganizationAuditedChange {
  DOMAIN
  NAME
}

enum PermissionAuditedChange {
  CLAIM
  DESCRIPTION
}

enum PriceAreaCode {
  DK1
  DK2
}

enum ProcessStatus {
  warning
  success
  danger
  info
  neutral
}

enum ProgressStatus {
  pending
  executing
  failed
  canceled
  completed
}

enum RequestCalculationDataType {
  TARIFF_SUBSCRIPTION_AND_FEE
  TARIFF
  SUBSCRIPTION
  FEE
  MONTHLY_TARIFF
  MONTHLY_SUBSCRIPTION
  MONTHLY_FEE
  MONTHLY_TARIFF_SUBSCRIPTION_AND_FEE
  PRODUCTION
  FLEX_CONSUMPTION
  TOTAL_CONSUMPTION
  NON_PROFILED_CONSUMPTION
  EXCHANGE
  ALL_ENERGY
}

enum SettlementReportMarketRole {
  OTHER
  GRID_ACCESS_PROVIDER
  ENERGY_SUPPLIER
  SYSTEM_OPERATOR
  DATA_HUB_ADMINISTRATOR
}

enum SettlementReportStatusType {
  IN_PROGRESS
  ERROR
  COMPLETED
  CANCELED
}

enum SortDirection {
  ASCENDING
  DESCENDING
}

enum SortEnumType {
  ASC
  DESC
}

enum UserAuditedChange {
  FIRST_NAME
  LAST_NAME
  PHONE_NUMBER
  STATUS
  INVITED_INTO_ACTOR
  USER_ROLE_ASSIGNED
  USER_ROLE_REMOVED
  USER_ROLE_REMOVED_DUE_TO_DEACTIVATION
  USER_LOGIN_FEDERATION_REQUESTED
  USER_LOGIN_FEDERATED
}

enum UserOverviewSortProperty {
  FirstName
  LastName
  Email
  PhoneNumber
  CreatedDate
  Status
  LatestLoginAt
}

enum UserRoleAuditedChange {
  NAME
  DESCRIPTION
  STATUS
  PERMISSION_ADDED
  PERMISSION_REMOVED
}

enum UserRoleStatus {
  ACTIVE
  INACTIVE
}

enum UserStatus {
  ACTIVE
  INACTIVE
  INVITED
  INVITE_EXPIRED
}

"The `@specifiedBy` directive is used within the type system definition language to provide a URL for specifying the behavior of custom scalar definitions."
directive @specifiedBy("The specifiedBy URL points to a human-readable specification. This field will only read a result for scalar types." url: String!) on SCALAR

"Represents a date range"
scalar DateRange

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime @specifiedBy(url: "https:\/\/www.graphql-scalars.com\/date-time")

scalar JSON

"The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1."
scalar Long

scalar URL @specifiedBy(url: "https:\/\/tools.ietf.org\/html\/rfc3986")

scalar UUID @specifiedBy(url: "https:\/\/tools.ietf.org\/html\/rfc4122")