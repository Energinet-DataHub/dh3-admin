schema {
  query: Query
  mutation: Mutation
}

interface Error {
  message: String!
}

type Actor {
  id: UUID!
  name: String! @cost(weight: "10")
  glnOrEicNumber: String! @cost(weight: "10")
  displayName: String! @cost(weight: "10")
  marketRole: EicFunction @cost(weight: "10")
  userRoles: [ActorUserRole!]! @cost(weight: "10")
  status: ActorStatus! @cost(weight: "10")
  gridAreas: [GridAreaDto!]! @cost(weight: "10")
  contact: ActorContactDto @cost(weight: "10")
  organization: Organization! @cost(weight: "10")
  balanceResponsibleAgreements: [BalanceResponsibilityAgreement!] @cost(weight: "10")
  credentials: ActorCredentialsDto @cost(weight: "10")
  publicMail: ActorPublicMail @cost(weight: "10")
}

type ActorAuditedChangeAuditLogDto {
  auditedBy: String @cost(weight: "10")
  change: ActorAuditedChange!
  timestamp: DateTime!
  isInitialAssignment: Boolean!
  currentValue: String
  previousValue: String
}

type ActorCertificateCredentialsDto {
  thumbprint: String!
  expirationDate: DateTime!
}

type ActorClientSecretCredentialsDto {
  clientSecretIdentifier: UUID!
  expirationDate: DateTime!
}

type ActorClientSecretDto {
  secretText: String!
}

type ActorContactDto {
  contactId: UUID!
  actorId: UUID!
  category: ContactCategory!
  name: String!
  email: String!
  phone: String
}

type ActorCredentialsDto {
  assignCertificateCredentialsUrl(actorId: UUID!): String! @cost(weight: "10")
  removeActorCredentialsUrl(actorId: UUID!): String! @cost(weight: "10")
  certificateCredentials: ActorCertificateCredentialsDto
  clientSecretCredentials: ActorClientSecretCredentialsDto
}

type ActorNameDto {
  value: String!
}

type ActorNameWithId {
  id: UUID!
  actorName: ActorNameDto!
}

type ActorPublicMail {
  mail: String!
}

type ActorUserRole {
  id: UUID!
  name: String!
  status: UserRoleStatus!
  description: String!
  eicFunction: EicFunction!
  assigned: Boolean!
}

type AddTokenToDownloadUrlPayload {
  string: String
  errors: [AddTokenToDownloadUrlError!]
}

type AddressDto {
  streetName: String
  number: String
  zipCode: String
  city: String
  country: String!
}

type ApiError implements Error {
  message: String!
  apiErrors: [ApiErrorDescriptor!]!
  statusCode: Int!
  response: String
  headers: [KeyValuePairOfStringAndIEnumerableOfString!]!
}

type ApiErrorDescriptor {
  message: String!
  code: String!
  args: JSON!
}

type ArchivedMessage {
  sender: Actor @cost(weight: "10")
  receiver: Actor @cost(weight: "10")
  documentUrl: String
  recordId: Long!
  id: String!
  messageId: String
  documentType: DocumentType!
  senderRole: ActorRole!
  receiverRole: ActorRole!
  createdAt: DateTime!
  businessReason: String
}

"A connection to a list of items."
type ArchivedMessagesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ArchivedMessagesEdge!]
  "A flattened list of the nodes."
  nodes: [ArchivedMessage!]
}

"An edge in a connection."
type ArchivedMessagesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: ArchivedMessage!
}

type AssociatedActors {
  email: String!
  actors: [UUID!]!
}

type BalanceResponsibilityAgreement {
  meteringPointType: MarketParticipantMeteringPointType!
  gridArea: GridAreaDto @cost(weight: "10")
  energySupplierWithName: ActorNameWithId @cost(weight: "10")
  balanceResponsibleWithName: ActorNameWithId @cost(weight: "10")
  validPeriod: DateRange! @cost(weight: "10")
  status: BalanceResponsibilityAgreementStatus! @cost(weight: "10")
}

type BalanceResponsiblePageResult {
  balanceResponsiblesUrl(locale: String!): String @cost(weight: "10")
  page: [BalanceResponsibleType!]!
  totalCount: Int!
}

type BalanceResponsibleType {
  validPeriod: DateRange! @cost(weight: "10")
  storageDocumentUrl: String
  gridAreaWithName: GridAreaDto @cost(weight: "10")
  supplierWithName: ActorNameDto @cost(weight: "10")
  balanceResponsibleWithName: ActorNameDto @cost(weight: "10")
  id: String!
  receivedDateTime: DateTime!
  supplier: String!
  balanceResponsible: String!
  meteringPointType: BalanceResponsibilityMeteringPointType!
  gridArea: String!
}

type CVROrganizationResult {
  name: String!
  hasResult: Boolean!
}

"An immutable calculation."
type Calculation {
  id: UUID!
  "Defines the wholesale calculation type"
  calculationType: CalculationType!
  period: DateRange! @cost(weight: "10")
  executionTimeStart: DateTime! @cost(weight: "10")
  executionTimeEnd: DateTime
  createdByUserName: String @cost(weight: "10")
  gridAreas: [GridAreaDto!]! @cost(weight: "10")
  state: CalculationOrchestrationState!
  executionType: CalculationExecutionType! @cost(weight: "10")
  statusType: ProcessStatus! @cost(weight: "10")
  currentStep: CalculationProgressStep! @cost(weight: "10")
  progress: [CalculationProgress!]! @cost(weight: "10")
}

type CalculationProgress {
  step: CalculationProgressStep!
  status: ProgressStatus!
}

"A connection to a list of items."
type CalculationsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [CalculationsEdge!]
  "A flattened list of the nodes."
  nodes: [Calculation!]
}

"An edge in a connection."
type CalculationsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Calculation!
}

type CancelScheduledCalculationPayload {
  boolean: Boolean
}

type CreateCalculationPayload {
  uuid: UUID
}

type CreateDelegationsForActorPayload {
  boolean: Boolean
  errors: [CreateDelegationsForActorError!]
}

type CreateMarketParticipantPayload {
  boolean: Boolean
  errors: [CreateMarketParticipantError!]
}

type CreateUserRolePayload {
  boolean: Boolean
  errors: [CreateUserRoleError!]
}

type DeactivateUserPayload {
  boolean: Boolean
  errors: [DeactivateUserError!]
}

type DeactivateUserRolePayload {
  boolean: Boolean
  errors: [DeactivateUserRoleError!]
}

type DismissNotificationPayload {
  boolean: Boolean
  errors: [DismissNotificationError!]
}

type EsettOutgoingMessage {
  period: DateRange! @cost(weight: "10")
  dispatchDocumentUrl: String
  responseDocumentUrl: String!
  gridArea: GridAreaDto @cost(weight: "10")
  documentId: String!
  created: DateTime!
  calculationType: ExchangeEventCalculationType!
  timeSeriesType: EsettTimeSeriesType!
  documentStatus: DocumentStatus!
  lastDispatched: DateTime
}

type ExchangeEventSearchResponse {
  items: [ExchangeEventSearchResult!]!
  totalCount: Int!
  gridAreaCount: Int!
}

type ExchangeEventSearchResult {
  gridArea: GridAreaDto @cost(weight: "10")
  energySupplier: ActorNameDto @cost(weight: "10")
  documentId: String!
  actorNumber: String
  gridAreaCodeOut: String
  created: DateTime!
  calculationType: ExchangeEventCalculationType!
  timeSeriesType: EsettTimeSeriesType!
  documentStatus: DocumentStatus!
  lastDispatched: DateTime
}

type ExchangeEventStatusReportResponse {
  waitingForExternalResponse: Int!
}

type GetUserOverviewResponse {
  users: [User!]! @cost(weight: "10")
  totalUserCount: Int!
}

type GetUserProfileResponse {
  firstName: String!
  lastName: String!
  phoneNumber: String!
  hasFederatedLogin: Boolean!
}

type GridAreaDto {
  priceAreaCode: PriceAreaCode!
  displayName: String!
  status: GridAreaStatus!
  includedInCalculation: Boolean! @cost(weight: "10")
  id: UUID!
  code: String!
  name: String!
  type: GridAreaType!
  validFrom: DateTime!
  validTo: DateTime
}

type GridAreaOverviewItemDto {
  priceAreaCode: PriceAreaCode!
  displayName: String!
  status: GridAreaStatus!
  id: UUID!
  code: String!
  name: String!
  validFrom: DateTime!
  validTo: DateTime
  actorNumber: String
  actorName: String
  organizationName: String
  fullFlexDate: DateTime
  type: GridAreaType!
}

"Imbalance price"
type ImbalancePrice {
  priceAreaCode: PriceAreaCode! @cost(weight: "10")
  timestamp: DateTime!
  price: Float
}

"Imbalance price for a given date"
type ImbalancePriceDaily {
  status: ImbalancePriceStatus! @cost(weight: "10")
  imbalancePricesDownloadImbalanceUrl: String! @cost(weight: "10")
  timeStamp: DateTime!
  imbalancePrices: [ImbalancePrice!]!
  importedAt: DateTime
}

type ImbalancePricePeriod {
  name: DateTime!
  priceAreaCode: PriceAreaCode!
  status: ImbalancePriceStatus!
}

type ImbalancePricesOverview {
  uploadImbalancePricesUrl: String! @cost(weight: "10")
  pricePeriods: [ImbalancePricePeriod!]!
}

type InitiateMitIdSignupPayload {
  boolean: Boolean
  errors: [InitiateMitIdSignupError!]
}

type InviteUserPayload {
  boolean: Boolean
  errors: [InviteUserError!]
}

type KeyValuePairOfStringAndIEnumerableOfString {
  key: String!
  value: [String!]!
}

type KeyValuePairOfStringAndListOfRequestSettlementReportGridAreaCalculation {
  key: String!
  value: [RequestSettlementReportGridAreaCalculation!]!
}

type MessageDelegationType {
  gridArea: GridAreaDto @cost(weight: "10")
  delegatedBy: Actor @cost(weight: "10")
  delegatedTo: Actor @cost(weight: "10")
  status: ActorDelegationStatus! @cost(weight: "10")
  id: UUID!
  periodId: UUID!
  process: DelegatedProcess!
  validPeriod: DateRange!
}

type MeteringGridAreaImbalancePerDayDto {
  imbalanceDay: DateTime!
  firstOccurrenceOfImbalance: DateTime!
  firstPositionOfImbalance: Int!
  quantity: Float!
}

type MeteringGridAreaImbalanceSearchResponse {
  items: [MeteringGridAreaImbalanceSearchResult!]!
  totalCount: Int!
}

type MeteringGridAreaImbalanceSearchResult {
  period: DateRange! @cost(weight: "10")
  mgaImbalanceDocumentUrl: String
  gridArea: GridAreaDto @cost(weight: "10")
  id: String!
  documentDateTime: DateTime!
  receivedDateTime: DateTime!
  incomingImbalancePerDay: [MeteringGridAreaImbalancePerDayDto!]!
  outgoingImbalancePerDay: [MeteringGridAreaImbalancePerDayDto!]!
}

type Mutation {
  updateActor(input: UpdateActorInput!): UpdateActorPayload! @cost(weight: "10")
  createMarketParticipant(input: CreateMarketParticipantInput!): CreateMarketParticipantPayload! @cost(weight: "10")
  createDelegationsForActor(input: CreateDelegationsForActorInput!): CreateDelegationsForActorPayload! @cost(weight: "10")
  stopDelegation(input: StopDelegationInput!): StopDelegationPayload! @cost(weight: "10")
  requestClientSecretCredentials(input: RequestClientSecretCredentialsInput!): RequestClientSecretCredentialsPayload! @cost(weight: "10")
  createCalculation(input: CreateCalculationInput!): CreateCalculationPayload! @cost(weight: "10")
  cancelScheduledCalculation(input: CancelScheduledCalculationInput!): CancelScheduledCalculationPayload! @cost(weight: "10")
  requestCalculation(input: RequestCalculationInput!): RequestCalculationPayload! @cost(weight: "10")
  resendWaitingEsettExchangeMessages: ResendWaitingEsettExchangeMessagesPayload! @cost(weight: "10")
  dismissNotification(input: DismissNotificationInput!): DismissNotificationPayload! @cost(weight: "10")
  updateOrganization(input: UpdateOrganizationInput!): UpdateOrganizationPayload! @cost(weight: "10")
  updatePermission(input: UpdatePermissionInput!): UpdatePermissionPayload! @cost(weight: "10")
  requestSettlementReport(requestSettlementReportInput: RequestSettlementReportInput!): RequestSettlementReportPayload! @cost(weight: "10")
  addTokenToDownloadUrl(input: AddTokenToDownloadUrlInput!): AddTokenToDownloadUrlPayload! @cost(weight: "10")
  updateUserProfile(input: UpdateUserProfileInput!): UpdateUserProfilePayload! @cost(weight: "10")
  updateUserIdentity(input: UpdateUserIdentityInput!): UpdateUserIdentityPayload! @cost(weight: "10")
  inviteUser(input: InviteUserInput!): InviteUserPayload! @cost(weight: "10")
  reInviteUser(input: ReInviteUserInput!): ReInviteUserPayload! @cost(weight: "10")
  resetTwoFactorAuthentication(input: ResetTwoFactorAuthenticationInput!): ResetTwoFactorAuthenticationPayload! @cost(weight: "10")
  deactivateUser(input: DeactivateUserInput!): DeactivateUserPayload! @cost(weight: "10")
  reActivateUser(input: ReActivateUserInput!): ReActivateUserPayload! @cost(weight: "10")
  initiateMitIdSignup: InitiateMitIdSignupPayload! @cost(weight: "10")
  updateUserRoleAssignment(input: UpdateUserRoleAssignmentInput!): UpdateUserRoleAssignmentPayload! @cost(weight: "10")
  updateUserRole(input: UpdateUserRoleInput!): UpdateUserRolePayload! @cost(weight: "10")
  createUserRole(input: CreateUserRoleInput!): CreateUserRolePayload! @cost(weight: "10")
  deactivateUserRole(input: DeactivateUserRoleInput!): DeactivateUserRolePayload! @cost(weight: "10")
}

type Organization {
  id: UUID!
  actors: [Actor!] @cost(weight: "10")
  name: String!
  businessRegisterIdentifier: String!
  domain: String!
  status: String!
  address: AddressDto!
}

type OrganizationAuditedChangeAuditLogDto {
  auditedBy: String @cost(weight: "10")
  change: OrganizationAuditedChange!
  timestamp: DateTime!
  isInitialAssignment: Boolean!
  currentValue: String
  previousValue: String
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

type Permission {
  userRoles: [UserRoleDto!]! @cost(weight: "10")
  id: Int!
  name: String!
  description: String!
  created: DateTime!
  assignableTo: [EicFunction!]!
}

type PermissionAuditedChangeAuditLogDto {
  auditedBy: String @cost(weight: "10")
  change: PermissionAuditedChange!
  timestamp: DateTime!
  isInitialAssignment: Boolean!
  currentValue: String
  previousValue: String
}

type PermissionDetailsDto {
  id: Int!
  name: String!
  description: String!
  created: DateTime!
}

type Permissions {
  getPermissionRelationsUrl: String!
  permissions: [Permission!]!
}

type Query {
  actorAuditLogs(actorId: UUID!): [ActorAuditedChangeAuditLogDto!]! @cost(weight: "10")
  selectedActor: Actor! @cost(weight: "10")
  actorById(id: UUID!): Actor! @cost(weight: "10")
  actors: [Actor!]! @cost(weight: "10")
  actorsByOrganizationId(organizationId: UUID!): [Actor!]! @cost(weight: "10")
  actorsForEicFunction(eicFunctions: [EicFunction!]): [Actor!]! @cost(weight: "10")
  delegationsForActor(actorId: UUID!): [MessageDelegationType!]! @cost(weight: "10")
  associatedActors(email: String!): AssociatedActors! @cost(weight: "10")
  filteredActors: [Actor!]! @cost(weight: "10")
  selectionActors: [SelectionActorDto!]! @cost(weight: "10")
  calculationById(id: UUID!): Calculation! @cost(weight: "10")
  calculations(input: CalculationQueryInput! filter: String "Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String order: [CalculationSortInput!] @cost(weight: "10")): CalculationsConnection @listSize(assumedSize: 50, slicingArguments: [ "first", "last" ], sizedFields: [ "edges", "nodes" ]) @cost(weight: "10")
  latestBalanceFixing(period: DateRange!): Calculation @cost(weight: "10") @deprecated(reason: "Use `latestCalculation` instead")
  latestCalculation(period: DateRange! calculationType: CalculationType!): Calculation @cost(weight: "10")
  esettServiceStatus: [ReadinessStatusDto!]! @cost(weight: "10")
  esettExchangeStatusReport: ExchangeEventStatusReportResponse! @cost(weight: "10")
  esettOutgoingMessageById(documentId: String!): EsettOutgoingMessage! @cost(weight: "10")
  esettExchangeEvents(pageNumber: Int! pageSize: Int! periodInterval: DateRange createdInterval: DateRange sentInterval: DateRange gridAreaCodes: [String!] calculationType: ExchangeEventCalculationType documentStatuses: [DocumentStatus!] timeSeriesType: EsettTimeSeriesType documentId: String sortProperty: ExchangeEventSortProperty! sortDirection: SortDirection! actorNumber: String): ExchangeEventSearchResponse! @cost(weight: "10")
  downloadEsettExchangeEvents(locale: String! periodInterval: DateRange createdInterval: DateRange sentInterval: DateRange gridAreaCodes: [String!] calculationType: ExchangeEventCalculationType documentStatuses: [DocumentStatus!] timeSeriesType: EsettTimeSeriesType documentId: String sortProperty: ExchangeEventSortProperty! sortDirection: SortDirection! actorNumber: String): String! @cost(weight: "10")
  meteringGridAreaImbalance(pageNumber: Int! pageSize: Int! createdFrom: DateTime createdTo: DateTime calculationPeriod: DateRange gridAreaCodes: [String!] documentId: String valuesToInclude: MeteringGridImbalanceValuesToInclude! sortProperty: MeteringGridAreaImbalanceSortProperty! sortDirection: SortDirection!): MeteringGridAreaImbalanceSearchResponse! @cost(weight: "10")
  downloadMeteringGridAreaImbalance(locale: String! createdFrom: DateTime createdTo: DateTime calculationPeriod: DateRange gridAreaCodes: [String!] documentId: String valuesToInclude: MeteringGridImbalanceValuesToInclude! sortProperty: MeteringGridAreaImbalanceSortProperty! sortDirection: SortDirection!): String! @cost(weight: "10")
  balanceResponsible(pageNumber: Int! pageSize: Int! sortProperty: BalanceResponsibleSortProperty! sortDirection: SortDirection!): BalanceResponsiblePageResult! @cost(weight: "10")
  gridAreaOverview: [GridAreaOverviewItemDto!]! @cost(weight: "10")
  gridAreas: [GridAreaDto!]! @cost(weight: "10")
  imbalancePricesOverview: ImbalancePricesOverview! @cost(weight: "10")
  imbalancePricesForMonth(year: Int! month: Int! areaCode: PriceAreaCode!): [ImbalancePriceDaily!]! @cost(weight: "10")
  archivedMessages(created: DateRange! senderId: UUID receiverId: UUID documentTypes: [DocumentType!] businessReasons: [BusinessReason!] includeRelated: Boolean filter: String "Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String order: ArchivedMessageSortInput): ArchivedMessagesConnection @listSize(assumedSize: 50, slicingArguments: [ "first", "last" ], sizedFields: [ "edges", "nodes" ]) @cost(weight: "10")
  organizationAuditLogs(organizationId: UUID!): [OrganizationAuditedChangeAuditLogDto!]! @cost(weight: "10")
  organizationById(id: UUID!): Organization! @cost(weight: "10")
  organizations: [Organization!]! @cost(weight: "10")
  searchOrganizationInCVR(cvr: String!): CVROrganizationResult! @cost(weight: "10")
  permissionById(id: Int!): Permission! @cost(weight: "10")
  permissions(searchTerm: String!): Permissions! @cost(weight: "10")
  permissionAuditLogs(id: Int!): [PermissionAuditedChangeAuditLogDto!]! @cost(weight: "10")
  permissionsByEicFunction(eicFunction: EicFunction!): [PermissionDetailsDto!]! @cost(weight: "10")
  settlementReports: [SettlementReport!]! @cost(weight: "10")
  settlementReportGridAreaCalculationsForPeriod(calculationType: CalculationType! gridAreaId: [String!]! calculationPeriod: DateRange!): [KeyValuePairOfStringAndListOfRequestSettlementReportGridAreaCalculation!]! @cost(weight: "10")
  userRoleAuditLogs(id: UUID!): [UserRoleAuditedChangeAuditLogDto!]! @cost(weight: "10")
  userAuditLogs(id: UUID!): [UserAuditedChangeAuditLogDto!]! @cost(weight: "10")
  userProfile: GetUserProfileResponse! @cost(weight: "10")
  userById(id: UUID!): User! @cost(weight: "10")
  domainExists(emailAddress: String!): Boolean! @cost(weight: "10")
  knownEmails: [String!]! @cost(weight: "10")
  userOverviewSearch(pageNumber: Int! pageSize: Int! sortProperty: UserOverviewSortProperty! sortDirection: MarketParticipantSortDirctionType! actorId: UUID searchText: String userRoleIds: [UUID!] userStatus: [UserStatus!]): GetUserOverviewResponse! @cost(weight: "10")
  userRolesByActorId(actorId: UUID!): [UserRoleDto!]! @cost(weight: "10")
  userRolesByEicFunction(eicFunction: EicFunction!): [UserRoleDto!]! @cost(weight: "10")
  userRoleById(id: UUID!): UserRoleWithPermissions! @cost(weight: "10")
  userRoles: [UserRoleDto!]! @cost(weight: "10")
}

type ReActivateUserPayload {
  boolean: Boolean
  errors: [ReActivateUserError!]
}

type ReInviteUserPayload {
  boolean: Boolean
  errors: [ReInviteUserError!]
}

type ReadinessStatusDto {
  component: ESettStageComponent!
  isReady: Boolean!
}

type RequestCalculationPayload {
  boolean: Boolean
}

type RequestClientSecretCredentialsPayload {
  actorClientSecretDto: ActorClientSecretDto
}

type RequestSettlementReportGridAreaCalculation {
  gridAreaWithName: GridAreaDto @cost(weight: "10")
  calculationId: UUID!
  calculationDate: DateTime!
}

type RequestSettlementReportPayload {
  boolean: Boolean
}

type ResendWaitingEsettExchangeMessagesPayload {
  boolean: Boolean
}

type ResetTwoFactorAuthenticationPayload {
  boolean: Boolean
  errors: [ResetTwoFactorAuthenticationError!]
}

type SelectionActorDto {
  id: UUID!
  gln: String!
  actorName: String!
  organizationName: String!
  marketRole: EicFunction!
}

type SettlementReport {
  settlementReportDownloadUrl: String
  actor: Actor @cost(weight: "10")
  id: String!
  requestedByActorId: UUID!
  calculationType: CalculationType!
  period: DateRange!
  numberOfGridAreasInReport: Int!
  includesBasisData: Boolean!
  statusMessage: String!
  progress: Float!
  statusType: SettlementReportStatusType!
  executionTime: DateRange!
  fromApi: Boolean!
  combineResultInASingleFile: Boolean!
  includeMonthlyAmount: Boolean!
  gridAreas: [String!]!
}

type StopDelegationPayload {
  boolean: Boolean
  errors: [StopDelegationError!]
}

type UpdateActorPayload {
  boolean: Boolean
  errors: [UpdateActorError!]
}

type UpdateOrganizationPayload {
  boolean: Boolean
  errors: [UpdateOrganizationError!]
}

type UpdatePermissionPayload {
  permission: Permission
  errors: [UpdatePermissionError!]
}

type UpdateUserIdentityPayload {
  boolean: Boolean
  errors: [UpdateUserIdentityError!]
}

type UpdateUserProfilePayload {
  boolean: Boolean
  errors: [UpdateUserProfileError!]
}

type UpdateUserRoleAssignmentPayload {
  boolean: Boolean
  errors: [UpdateUserRoleAssignmentError!]
}

type UpdateUserRolePayload {
  boolean: Boolean
  errors: [UpdateUserRoleError!]
}

type User {
  actors: [Actor!]! @cost(weight: "10")
  administratedBy: Actor @cost(weight: "10")
  id: UUID!
  name: String!
  status: UserStatus!
  firstName: String!
  lastName: String!
  email: String!
  phoneNumber: String
  createdDate: DateTime!
  latestLoginAt: DateTime
}

type UserAuditedChangeAuditLogDto {
  auditedBy: String @cost(weight: "10")
  affectedActorName: String @cost(weight: "10")
  affectedUserRoleName: String @cost(weight: "10")
  change: UserAuditedChange!
  timestamp: DateTime!
  isInitialAssignment: Boolean!
  currentValue: String
  previousValue: String
}

type UserRoleAuditedChangeAuditLogDto {
  auditedBy: String @cost(weight: "10")
  affectedPermissionName: String @cost(weight: "10")
  change: UserRoleAuditedChange!
  timestamp: DateTime!
  isInitialAssignment: Boolean!
  currentValue: String
  previousValue: String
}

type UserRoleDto {
  id: UUID!
  name: String!
  description: String!
  eicFunction: EicFunction!
  status: UserRoleStatus!
}

type UserRoleWithPermissions {
  userRoles: [UserRoleDto!]! @cost(weight: "10")
  id: UUID!
  name: String!
  description: String!
  eicFunction: EicFunction!
  status: UserRoleStatus!
  permissions: [PermissionDetailsDto!]!
}

union AddTokenToDownloadUrlError = ApiError

union CreateDelegationsForActorError = ApiError

union CreateMarketParticipantError = ApiError

union CreateUserRoleError = ApiError

union DeactivateUserError = ApiError

union DeactivateUserRoleError = ApiError

union DismissNotificationError = ApiError

union InitiateMitIdSignupError = ApiError

union InviteUserError = ApiError

union ReActivateUserError = ApiError

union ReInviteUserError = ApiError

union ResetTwoFactorAuthenticationError = ApiError

union StopDelegationError = ApiError

union UpdateActorError = ApiError

union UpdateOrganizationError = ApiError

union UpdatePermissionError = ApiError

union UpdateUserIdentityError = ApiError

union UpdateUserProfileError = ApiError

union UpdateUserRoleAssignmentError = ApiError

union UpdateUserRoleError = ApiError

input ActorNameDtoInput {
  value: String!
}

input ActorNumberDtoInput {
  value: String!
}

input AddTokenToDownloadUrlInput {
  downloadUrl: URL!
}

input AddressDtoInput {
  streetName: String
  number: String
  zipCode: String
  city: String
  country: String!
}

input ArchivedMessageSortInput {
  messageId: SortEnumType
  documentType: SortEnumType
  sender: SortEnumType
  receiver: SortEnumType
  createdAt: SortEnumType
}

input CalculationQueryInput {
  gridAreaCodes: [String!]
  states: [CalculationOrchestrationState!]
  executionType: CalculationExecutionType
  calculationTypes: [CalculationType!]
  executionTime: DateRange
  period: DateRange
}

"An immutable calculation."
input CalculationSortInput {
  "Defines the wholesale calculation type"
  calculationType: SortEnumType @cost(weight: "10")
  isInternalCalculation: SortEnumType @cost(weight: "10")
  executionTime: SortEnumType @cost(weight: "10")
  status: SortEnumType @cost(weight: "10")
  period: SortEnumType @cost(weight: "10")
  executionType: SortEnumType @cost(weight: "10")
}

input CancelScheduledCalculationInput {
  calculationId: UUID!
}

input CreateActorContactDtoInput {
  name: String!
  category: ContactCategory!
  email: String!
  phone: String
}

input CreateActorGridAreaInput {
  code: String!
  meteringPointTypes: [String!]!
}

input CreateActorInput {
  organizationId: UUID!
  name: ActorNameDtoInput!
  actorNumber: ActorNumberDtoInput!
  marketRoles: [CreateActorMarketRoleInput!]!
}

input CreateActorMarketRoleInput {
  eicFunction: EicFunction!
  gridAreas: [CreateActorGridAreaInput!]!
  comment: String
}

input CreateCalculationInput {
  executionType: CalculationExecutionType!
  period: DateRange!
  gridAreaCodes: [String!]!
  calculationType: CalculationType!
  scheduledAt: DateTime
}

input CreateDelegationsForActorInput {
  actorId: UUID!
  delegations: CreateProcessDelegationsInput!
}

input CreateMarketParticipantInput {
  organizationId: UUID
  organization: CreateOrganizationDtoInput
  actor: CreateActorInput!
  actorContact: CreateActorContactDtoInput!
}

input CreateOrganizationDtoInput {
  name: String!
  businessRegisterIdentifier: String!
  address: AddressDtoInput!
  domain: String!
}

input CreateProcessDelegationsInput {
  delegatedFrom: UUID!
  delegatedTo: UUID!
  gridAreas: [String!]!
  delegatedProcesses: [DelegatedProcess!]!
  startsAt: DateTime!
}

input CreateUserRoleDtoInput {
  name: String!
  description: String!
  status: UserRoleStatus!
  eicFunction: EicFunction!
  permissions: [Int!]!
}

input CreateUserRoleInput {
  userRole: CreateUserRoleDtoInput!
}

input DeactivateUserInput {
  userId: UUID!
}

input DeactivateUserRoleInput {
  roleId: UUID!
}

input DismissNotificationInput {
  notificationId: Int!
}

input InvitationUserDetailsDtoInput {
  firstName: String!
  lastName: String!
  phoneNumber: String!
}

input InviteUserInput {
  userInviteDto: UserInvitationDtoInput!
}

input ReActivateUserInput {
  userId: UUID!
}

input ReInviteUserInput {
  userId: UUID!
}

input RequestCalculationInput {
  calculationType: CalculationType!
  period: DateRange!
  requestCalculationDataType: RequestCalculationDataType!
  gridArea: String
  energySupplierId: String
  balanceResponsibleId: String
}

input RequestClientSecretCredentialsInput {
  actorId: UUID!
}

input RequestSettlementReportGridAreaInput {
  calculationId: UUID
  gridAreaCode: String!
}

input RequestSettlementReportInput {
  calculationType: CalculationType!
  period: DateRange!
  gridAreasWithCalculations: [RequestSettlementReportGridAreaInput!]!
  combineResultInASingleFile: Boolean!
  preventLargeTextFiles: Boolean!
  includeMonthlySums: Boolean!
  includeBasisData: Boolean!
  useApi: Boolean!
  energySupplier: String
  csvLanguage: String
  requestAsActorId: String
  requestAsMarketRole: SettlementReportMarketRole
}

input ResetTwoFactorAuthenticationInput {
  userId: UUID!
}

input StopDelegationInput {
  stopDelegationPeriods: [StopDelegationPeriodInput!]!
}

input StopDelegationPeriodInput {
  delegationId: UUID!
  stopPeriod: StopProcessDelegationDtoInput!
}

input StopProcessDelegationDtoInput {
  periodId: UUID!
  stopsAt: DateTime
}

input UpdateActorInput {
  actorId: UUID!
  actorName: String!
  departmentName: String!
  departmentEmail: String!
  departmentPhone: String!
}

input UpdateActorUserRolesInput {
  actorId: UUID!
  assignments: UpdateUserRoleAssignmentsDtoInput!
}

input UpdateOrganizationInput {
  orgId: UUID!
  domain: String!
}

input UpdatePermissionInput {
  id: Int!
  description: String!
}

input UpdateUserIdentityInput {
  userId: UUID!
  userIdentityUpdateDto: UserIdentityUpdateDtoInput!
}

input UpdateUserProfileInput {
  userProfileUpdateDto: UserProfileUpdateDtoInput!
}

input UpdateUserRoleAssignmentInput {
  userId: UUID!
  input: [UpdateActorUserRolesInput!]!
}

input UpdateUserRoleAssignmentsDtoInput {
  added: [UUID!]!
  removed: [UUID!]!
}

input UpdateUserRoleDtoInput {
  name: String!
  description: String!
  status: UserRoleStatus!
  permissions: [Int!]!
}

input UpdateUserRoleInput {
  userRoleId: UUID!
  userRole: UpdateUserRoleDtoInput!
}

input UserIdentityUpdateDtoInput {
  firstName: String!
  lastName: String!
  phoneNumber: String!
}

input UserInvitationDtoInput {
  email: String!
  invitationUserDetails: InvitationUserDetailsDtoInput
  assignedActor: UUID!
  assignedRoles: [UUID!]!
}

input UserProfileUpdateDtoInput {
  firstName: String!
  lastName: String!
  phoneNumber: String!
}

enum ActorAuditedChange {
  NAME
  STATUS
  CONTACT_NAME
  CONTACT_EMAIL
  CONTACT_PHONE
  CONTACT_CATEGORY_ADDED
  CONTACT_CATEGORY_REMOVED
  CERTIFICATE_CREDENTIALS
  CLIENT_SECRET_CREDENTIALS
  DELEGATION_START
  DELEGATION_STOP
}

enum ActorDelegationStatus {
  AWAITING
  ACTIVE
  EXPIRED
  CANCELLED
}

enum ActorRole {
  METERING_POINT_ADMINISTRATOR
  ENERGY_SUPPLIER
  GRID_ACCESS_PROVIDER
  METERED_DATA_ADMINISTRATOR
  METERED_DATA_RESPONSIBLE
  BALANCE_RESPONSIBLE_PARTY
  IMBALANCE_SETTLEMENT_RESPONSIBLE
  SYSTEM_OPERATOR
  DANISH_ENERGY_AGENCY
  DELEGATED
  DATA_HUB_ADMINISTRATOR
}

enum ActorStatus {
  New
  Active
  Inactive
  Passive
}

"Represents the status of a balance responsibility agreement."
enum BalanceResponsibilityAgreementStatus {
  AWAITING
  ACTIVE
  SOON_TO_EXPIRE
  EXPIRED
}

enum BalanceResponsibilityMeteringPointType {
  MgaExchange
  Production
  Consumption
}

enum BalanceResponsibleSortProperty {
  VALID_FROM
  VALID_TO
  RECEIVED_DATE
}

enum BusinessReason {
  D03
  D04
  D05
  D32
}

enum CalculationExecutionType {
  EXTERNAL
  INTERNAL
}

enum CalculationOrchestrationState {
  SCHEDULED
  CALCULATING
  CALCULATED
  CALCULATION_FAILED
  ACTOR_MESSAGES_ENQUEUING
  ACTOR_MESSAGES_ENQUEUED
  ACTOR_MESSAGES_ENQUEUING_FAILED
  COMPLETED
  CANCELED
  STARTED
}

enum CalculationProgressStep {
  SCHEDULE
  CALCULATE
  ACTOR_MESSAGE_ENQUEUE
}

"Defines the wholesale calculation type"
enum CalculationType {
  BALANCE_FIXING
  AGGREGATION
  WHOLESALE_FIXING
  FIRST_CORRECTION_SETTLEMENT
  SECOND_CORRECTION_SETTLEMENT
  THIRD_CORRECTION_SETTLEMENT
}

enum ContactCategory {
  DEFAULT
  CHARGES
  CHARGE_LINKS
  ELECTRICAL_HEATING
  END_OF_SUPPLY
  ENERGINET_INQUIRY
  ERROR_REPORT
  INCORRECT_MOVE
  INCORRECT_SWITCH
  MEASUREMENT_DATA
  METERING_POINT
  NET_SETTLEMENT
  NOTIFICATION
  RECON
  REMINDER
}

enum DelegatedProcess {
  REQUEST_ENERGY_RESULTS
  RECEIVE_ENERGY_RESULTS
  REQUEST_WHOLESALE_RESULTS
  RECEIVE_WHOLESALE_RESULTS
}

enum DocumentStatus {
  RECEIVED
  AWAITING_DISPATCH
  AWAITING_REPLY
  ACCEPTED
  REJECTED
  BIZ_TALK_ACCEPTED
}

enum DocumentType {
  B2C_REQUEST_AGGREGATED_MEASURE_DATA
  B2C_REQUEST_WHOLESALE_SETTLEMENT
  NOTIFY_AGGREGATED_MEASURE_DATA
  NOTIFY_WHOLESALE_SERVICES
  REJECT_REQUEST_AGGREGATED_MEASURE_DATA
  REJECT_REQUEST_WHOLESALE_SETTLEMENT
  REQUEST_AGGREGATED_MEASURE_DATA
  REQUEST_WHOLESALE_SETTLEMENT
}

enum ESettStageComponent {
  INGESTION
  CONVERTER
  SENDER
  RECEIVER
}

enum EicFunction {
  BalanceResponsibleParty
  BillingAgent
  EnergySupplier
  GridAccessProvider
  ImbalanceSettlementResponsible
  MeterOperator
  MeteredDataAdministrator
  MeteredDataResponsible
  MeteringPointAdministrator
  SystemOperator
  DanishEnergyAgency
  DataHubAdministrator
  IndependentAggregator
  SerialEnergyTrader
  Delegated
  ItSupplier
}

enum EsettTimeSeriesType {
  MgaExchange
  Production
  Consumption
}

enum ExchangeEventCalculationType {
  BALANCE_FIXING
  AGGREGATION
}

enum ExchangeEventSortProperty {
  CALCULATION_TYPE
  CREATED
  DOCUMENT_ID
  DOCUMENT_STATUS
  GRID_AREA_CODE
  TIME_SERIES_TYPE
  LATEST_DISPATCHED
}

enum GridAreaStatus {
  Created
  Active
  Expired
  Archived
}

enum GridAreaType {
  NotSet
  Transmission
  Distribution
  Other
  Test
  GridLossDK
  GridLossAbroad
  Aboard
}

enum ImbalancePriceStatus {
  NO_DATA
  IN_COMPLETE
  COMPLETE
}

enum MarketParticipantMeteringPointType {
  Unknown
  D01VeProduction
  D02Analysis
  D03NotUsed
  D04SurplusProductionGroup6
  D05NetProduction
  D06SupplyToGrid
  D07ConsumptionFromGrid
  D08WholeSaleServicesInformation
  D09OwnProduction
  D10NetFromGrid
  D11NetToGrid
  D12TotalConsumption
  D13NetLossCorrection
  D14ElectricalHeating
  D15NetConsumption
  D17OtherConsumption
  D18OtherProduction
  D20ExchangeReactiveEnergy
  D99InternalUse
  E17Consumption
  E18Production
  E20Exchange
}

enum MarketParticipantSortDirctionType {
  Asc
  Desc
}

enum MeteringGridAreaImbalanceSortProperty {
  DOCUMENT_DATE_TIME
  GRID_AREA_CODE
  DOCUMENT_ID
  RECEIVED_DATE_TIME
}

enum MeteringGridImbalanceValuesToInclude {
  IMBALANCES
  BALANCES
  BOTH
}

enum OrganizationAuditedChange {
  DOMAIN
  NAME
}

enum PermissionAuditedChange {
  CLAIM
  DESCRIPTION
}

enum PriceAreaCode {
  DK1
  DK2
}

enum ProcessStatus {
  warning
  success
  danger
  info
  neutral
}

enum ProgressStatus {
  pending
  executing
  failed
  canceled
  completed
}

enum RequestCalculationDataType {
  TARIFF_SUBSCRIPTION_AND_FEE
  TARIFF
  SUBSCRIPTION
  FEE
  MONTHLY_TARIFF
  MONTHLY_SUBSCRIPTION
  MONTHLY_FEE
  MONTHLY_TARIFF_SUBSCRIPTION_AND_FEE
  PRODUCTION
  FLEX_CONSUMPTION
  TOTAL_CONSUMPTION
  NON_PROFILED_CONSUMPTION
  EXCHANGE
  ALL_ENERGY
}

enum SettlementReportMarketRole {
  OTHER
  GRID_ACCESS_PROVIDER
  ENERGY_SUPPLIER
  SYSTEM_OPERATOR
  DATA_HUB_ADMINISTRATOR
}

enum SettlementReportStatusType {
  IN_PROGRESS
  ERROR
  COMPLETED
}

enum SortDirection {
  ASCENDING
  DESCENDING
}

enum SortEnumType {
  ASC
  DESC
}

enum UserAuditedChange {
  FIRST_NAME
  LAST_NAME
  PHONE_NUMBER
  STATUS
  INVITED_INTO_ACTOR
  USER_ROLE_ASSIGNED
  USER_ROLE_REMOVED
  USER_ROLE_REMOVED_DUE_TO_DEACTIVATION
  USER_LOGIN_FEDERATION_REQUESTED
  USER_LOGIN_FEDERATED
}

enum UserOverviewSortProperty {
  FirstName
  LastName
  Email
  PhoneNumber
  CreatedDate
  Status
  LatestLoginAt
}

enum UserRoleAuditedChange {
  NAME
  DESCRIPTION
  STATUS
  PERMISSION_ADDED
  PERMISSION_REMOVED
}

enum UserRoleStatus {
  ACTIVE
  INACTIVE
}

enum UserStatus {
  ACTIVE
  INACTIVE
  INVITED
  INVITE_EXPIRED
}

"The purpose of the `cost` directive is to define a `weight` for GraphQL types, fields, and arguments. Static analysis can use these weights when calculating the overall cost of a query or response."
directive @cost("The `weight` argument defines what value to add to the overall cost for every appearance, or possible appearance, of a type, field, argument, etc." weight: String!) on SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM | INPUT_FIELD_DEFINITION

"The purpose of the `@listSize` directive is to either inform the static analysis about the size of returned lists (if that information is statically available), or to point the analysis to where to find that information."
directive @listSize("The `assumedSize` argument can be used to statically define the maximum length of a list returned by a field." assumedSize: Int "The `slicingArguments` argument can be used to define which of the field's arguments with numeric type are slicing arguments, so that their value determines the size of the list returned by that field. It may specify a list of multiple slicing arguments." slicingArguments: [String!] "The `sizedFields` argument can be used to define that the value of the `assumedSize` argument or of a slicing argument does not affect the size of a list returned by a field itself, but that of a list returned by one of its sub-fields." sizedFields: [String!] "The `requireOneSlicingArgument` argument can be used to inform the static analysis that it should expect that exactly one of the defined slicing arguments is present in a query. If that is not the case (i.e., if none or multiple slicing arguments are present), the static analysis may throw an error." requireOneSlicingArgument: Boolean! = true) on FIELD_DEFINITION

"The `@specifiedBy` directive is used within the type system definition language to provide a URL for specifying the behavior of custom scalar definitions."
directive @specifiedBy("The specifiedBy URL points to a human-readable specification. This field will only read a result for scalar types." url: String!) on SCALAR

"Represents a date range"
scalar DateRange

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime @specifiedBy(url: "https:\/\/www.graphql-scalars.com\/date-time")

scalar JSON

"The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1."
scalar Long

scalar URL @specifiedBy(url: "https:\/\/tools.ietf.org\/html\/rfc3986")

scalar UUID @specifiedBy(url: "https:\/\/tools.ietf.org\/html\/rfc4122")